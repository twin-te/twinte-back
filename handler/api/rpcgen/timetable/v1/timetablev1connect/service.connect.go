// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: timetable/v1/service.proto

package timetablev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twin-te/twinte-back/handler/api/rpcgen/timetable/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// TimetableServiceName is the fully-qualified name of the TimetableService service.
	TimetableServiceName = "timetable.v1.TimetableService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TimetableServiceGetCoursesProcedure is the fully-qualified name of the TimetableService's
	// GetCourses RPC.
	TimetableServiceGetCoursesProcedure = "/timetable.v1.TimetableService/GetCourses"
	// TimetableServiceCreateRegisteredCoursesByCodesProcedure is the fully-qualified name of the
	// TimetableService's CreateRegisteredCoursesByCodes RPC.
	TimetableServiceCreateRegisteredCoursesByCodesProcedure = "/timetable.v1.TimetableService/CreateRegisteredCoursesByCodes"
	// TimetableServiceCreateRegisteredCourseManuallyProcedure is the fully-qualified name of the
	// TimetableService's CreateRegisteredCourseManually RPC.
	TimetableServiceCreateRegisteredCourseManuallyProcedure = "/timetable.v1.TimetableService/CreateRegisteredCourseManually"
	// TimetableServiceGetRegisteredCoursesProcedure is the fully-qualified name of the
	// TimetableService's GetRegisteredCourses RPC.
	TimetableServiceGetRegisteredCoursesProcedure = "/timetable.v1.TimetableService/GetRegisteredCourses"
	// TimetableServiceUpdateRegisteredCourseProcedure is the fully-qualified name of the
	// TimetableService's UpdateRegisteredCourse RPC.
	TimetableServiceUpdateRegisteredCourseProcedure = "/timetable.v1.TimetableService/UpdateRegisteredCourse"
	// TimetableServiceDeleteRegisteredCourseProcedure is the fully-qualified name of the
	// TimetableService's DeleteRegisteredCourse RPC.
	TimetableServiceDeleteRegisteredCourseProcedure = "/timetable.v1.TimetableService/DeleteRegisteredCourse"
	// TimetableServiceCreateTagProcedure is the fully-qualified name of the TimetableService's
	// CreateTag RPC.
	TimetableServiceCreateTagProcedure = "/timetable.v1.TimetableService/CreateTag"
	// TimetableServiceGetTagsProcedure is the fully-qualified name of the TimetableService's GetTags
	// RPC.
	TimetableServiceGetTagsProcedure = "/timetable.v1.TimetableService/GetTags"
	// TimetableServiceUpdateTagProcedure is the fully-qualified name of the TimetableService's
	// UpdateTag RPC.
	TimetableServiceUpdateTagProcedure = "/timetable.v1.TimetableService/UpdateTag"
	// TimetableServiceDeleteTagProcedure is the fully-qualified name of the TimetableService's
	// DeleteTag RPC.
	TimetableServiceDeleteTagProcedure = "/timetable.v1.TimetableService/DeleteTag"
	// TimetableServiceRearrangeTagsProcedure is the fully-qualified name of the TimetableService's
	// RearrangeTags RPC.
	TimetableServiceRearrangeTagsProcedure = "/timetable.v1.TimetableService/RearrangeTags"
)

// TimetableServiceClient is a client for the timetable.v1.TimetableService service.
type TimetableServiceClient interface {
	GetCourses(context.Context, *connect_go.Request[v1.GetCoursesRequest]) (*connect_go.Response[v1.GetCoursesResponse], error)
	CreateRegisteredCoursesByCodes(context.Context, *connect_go.Request[v1.CreateRegisteredCoursesByCodesRequest]) (*connect_go.Response[v1.CreateRegisteredCoursesByCodesResponse], error)
	CreateRegisteredCourseManually(context.Context, *connect_go.Request[v1.CreateRegisteredCourseManuallyRequest]) (*connect_go.Response[v1.CreateRegisteredCourseManuallyResponse], error)
	GetRegisteredCourses(context.Context, *connect_go.Request[v1.GetRegisteredCoursesRequest]) (*connect_go.Response[v1.GetRegisteredCoursesResponse], error)
	UpdateRegisteredCourse(context.Context, *connect_go.Request[v1.UpdateRegisteredCourseRequest]) (*connect_go.Response[v1.UpdateRegisteredCourseResponse], error)
	DeleteRegisteredCourse(context.Context, *connect_go.Request[v1.DeleteRegisteredCourseRequest]) (*connect_go.Response[v1.DeleteRegisteredCourseResponse], error)
	CreateTag(context.Context, *connect_go.Request[v1.CreateTagRequest]) (*connect_go.Response[v1.CreateTagResponse], error)
	GetTags(context.Context, *connect_go.Request[v1.GetTagsRequest]) (*connect_go.Response[v1.GetTagsResponse], error)
	UpdateTag(context.Context, *connect_go.Request[v1.UpdateTagRequest]) (*connect_go.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error)
	RearrangeTags(context.Context, *connect_go.Request[v1.RearrangeTagsRequest]) (*connect_go.Response[v1.RearrangeTagsResponse], error)
}

// NewTimetableServiceClient constructs a client for the timetable.v1.TimetableService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTimetableServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) TimetableServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &timetableServiceClient{
		getCourses: connect_go.NewClient[v1.GetCoursesRequest, v1.GetCoursesResponse](
			httpClient,
			baseURL+TimetableServiceGetCoursesProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		createRegisteredCoursesByCodes: connect_go.NewClient[v1.CreateRegisteredCoursesByCodesRequest, v1.CreateRegisteredCoursesByCodesResponse](
			httpClient,
			baseURL+TimetableServiceCreateRegisteredCoursesByCodesProcedure,
			opts...,
		),
		createRegisteredCourseManually: connect_go.NewClient[v1.CreateRegisteredCourseManuallyRequest, v1.CreateRegisteredCourseManuallyResponse](
			httpClient,
			baseURL+TimetableServiceCreateRegisteredCourseManuallyProcedure,
			opts...,
		),
		getRegisteredCourses: connect_go.NewClient[v1.GetRegisteredCoursesRequest, v1.GetRegisteredCoursesResponse](
			httpClient,
			baseURL+TimetableServiceGetRegisteredCoursesProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		updateRegisteredCourse: connect_go.NewClient[v1.UpdateRegisteredCourseRequest, v1.UpdateRegisteredCourseResponse](
			httpClient,
			baseURL+TimetableServiceUpdateRegisteredCourseProcedure,
			opts...,
		),
		deleteRegisteredCourse: connect_go.NewClient[v1.DeleteRegisteredCourseRequest, v1.DeleteRegisteredCourseResponse](
			httpClient,
			baseURL+TimetableServiceDeleteRegisteredCourseProcedure,
			opts...,
		),
		createTag: connect_go.NewClient[v1.CreateTagRequest, v1.CreateTagResponse](
			httpClient,
			baseURL+TimetableServiceCreateTagProcedure,
			opts...,
		),
		getTags: connect_go.NewClient[v1.GetTagsRequest, v1.GetTagsResponse](
			httpClient,
			baseURL+TimetableServiceGetTagsProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		updateTag: connect_go.NewClient[v1.UpdateTagRequest, v1.UpdateTagResponse](
			httpClient,
			baseURL+TimetableServiceUpdateTagProcedure,
			opts...,
		),
		deleteTag: connect_go.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+TimetableServiceDeleteTagProcedure,
			opts...,
		),
		rearrangeTags: connect_go.NewClient[v1.RearrangeTagsRequest, v1.RearrangeTagsResponse](
			httpClient,
			baseURL+TimetableServiceRearrangeTagsProcedure,
			opts...,
		),
	}
}

// timetableServiceClient implements TimetableServiceClient.
type timetableServiceClient struct {
	getCourses                     *connect_go.Client[v1.GetCoursesRequest, v1.GetCoursesResponse]
	createRegisteredCoursesByCodes *connect_go.Client[v1.CreateRegisteredCoursesByCodesRequest, v1.CreateRegisteredCoursesByCodesResponse]
	createRegisteredCourseManually *connect_go.Client[v1.CreateRegisteredCourseManuallyRequest, v1.CreateRegisteredCourseManuallyResponse]
	getRegisteredCourses           *connect_go.Client[v1.GetRegisteredCoursesRequest, v1.GetRegisteredCoursesResponse]
	updateRegisteredCourse         *connect_go.Client[v1.UpdateRegisteredCourseRequest, v1.UpdateRegisteredCourseResponse]
	deleteRegisteredCourse         *connect_go.Client[v1.DeleteRegisteredCourseRequest, v1.DeleteRegisteredCourseResponse]
	createTag                      *connect_go.Client[v1.CreateTagRequest, v1.CreateTagResponse]
	getTags                        *connect_go.Client[v1.GetTagsRequest, v1.GetTagsResponse]
	updateTag                      *connect_go.Client[v1.UpdateTagRequest, v1.UpdateTagResponse]
	deleteTag                      *connect_go.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
	rearrangeTags                  *connect_go.Client[v1.RearrangeTagsRequest, v1.RearrangeTagsResponse]
}

// GetCourses calls timetable.v1.TimetableService.GetCourses.
func (c *timetableServiceClient) GetCourses(ctx context.Context, req *connect_go.Request[v1.GetCoursesRequest]) (*connect_go.Response[v1.GetCoursesResponse], error) {
	return c.getCourses.CallUnary(ctx, req)
}

// CreateRegisteredCoursesByCodes calls
// timetable.v1.TimetableService.CreateRegisteredCoursesByCodes.
func (c *timetableServiceClient) CreateRegisteredCoursesByCodes(ctx context.Context, req *connect_go.Request[v1.CreateRegisteredCoursesByCodesRequest]) (*connect_go.Response[v1.CreateRegisteredCoursesByCodesResponse], error) {
	return c.createRegisteredCoursesByCodes.CallUnary(ctx, req)
}

// CreateRegisteredCourseManually calls
// timetable.v1.TimetableService.CreateRegisteredCourseManually.
func (c *timetableServiceClient) CreateRegisteredCourseManually(ctx context.Context, req *connect_go.Request[v1.CreateRegisteredCourseManuallyRequest]) (*connect_go.Response[v1.CreateRegisteredCourseManuallyResponse], error) {
	return c.createRegisteredCourseManually.CallUnary(ctx, req)
}

// GetRegisteredCourses calls timetable.v1.TimetableService.GetRegisteredCourses.
func (c *timetableServiceClient) GetRegisteredCourses(ctx context.Context, req *connect_go.Request[v1.GetRegisteredCoursesRequest]) (*connect_go.Response[v1.GetRegisteredCoursesResponse], error) {
	return c.getRegisteredCourses.CallUnary(ctx, req)
}

// UpdateRegisteredCourse calls timetable.v1.TimetableService.UpdateRegisteredCourse.
func (c *timetableServiceClient) UpdateRegisteredCourse(ctx context.Context, req *connect_go.Request[v1.UpdateRegisteredCourseRequest]) (*connect_go.Response[v1.UpdateRegisteredCourseResponse], error) {
	return c.updateRegisteredCourse.CallUnary(ctx, req)
}

// DeleteRegisteredCourse calls timetable.v1.TimetableService.DeleteRegisteredCourse.
func (c *timetableServiceClient) DeleteRegisteredCourse(ctx context.Context, req *connect_go.Request[v1.DeleteRegisteredCourseRequest]) (*connect_go.Response[v1.DeleteRegisteredCourseResponse], error) {
	return c.deleteRegisteredCourse.CallUnary(ctx, req)
}

// CreateTag calls timetable.v1.TimetableService.CreateTag.
func (c *timetableServiceClient) CreateTag(ctx context.Context, req *connect_go.Request[v1.CreateTagRequest]) (*connect_go.Response[v1.CreateTagResponse], error) {
	return c.createTag.CallUnary(ctx, req)
}

// GetTags calls timetable.v1.TimetableService.GetTags.
func (c *timetableServiceClient) GetTags(ctx context.Context, req *connect_go.Request[v1.GetTagsRequest]) (*connect_go.Response[v1.GetTagsResponse], error) {
	return c.getTags.CallUnary(ctx, req)
}

// UpdateTag calls timetable.v1.TimetableService.UpdateTag.
func (c *timetableServiceClient) UpdateTag(ctx context.Context, req *connect_go.Request[v1.UpdateTagRequest]) (*connect_go.Response[v1.UpdateTagResponse], error) {
	return c.updateTag.CallUnary(ctx, req)
}

// DeleteTag calls timetable.v1.TimetableService.DeleteTag.
func (c *timetableServiceClient) DeleteTag(ctx context.Context, req *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// RearrangeTags calls timetable.v1.TimetableService.RearrangeTags.
func (c *timetableServiceClient) RearrangeTags(ctx context.Context, req *connect_go.Request[v1.RearrangeTagsRequest]) (*connect_go.Response[v1.RearrangeTagsResponse], error) {
	return c.rearrangeTags.CallUnary(ctx, req)
}

// TimetableServiceHandler is an implementation of the timetable.v1.TimetableService service.
type TimetableServiceHandler interface {
	GetCourses(context.Context, *connect_go.Request[v1.GetCoursesRequest]) (*connect_go.Response[v1.GetCoursesResponse], error)
	CreateRegisteredCoursesByCodes(context.Context, *connect_go.Request[v1.CreateRegisteredCoursesByCodesRequest]) (*connect_go.Response[v1.CreateRegisteredCoursesByCodesResponse], error)
	CreateRegisteredCourseManually(context.Context, *connect_go.Request[v1.CreateRegisteredCourseManuallyRequest]) (*connect_go.Response[v1.CreateRegisteredCourseManuallyResponse], error)
	GetRegisteredCourses(context.Context, *connect_go.Request[v1.GetRegisteredCoursesRequest]) (*connect_go.Response[v1.GetRegisteredCoursesResponse], error)
	UpdateRegisteredCourse(context.Context, *connect_go.Request[v1.UpdateRegisteredCourseRequest]) (*connect_go.Response[v1.UpdateRegisteredCourseResponse], error)
	DeleteRegisteredCourse(context.Context, *connect_go.Request[v1.DeleteRegisteredCourseRequest]) (*connect_go.Response[v1.DeleteRegisteredCourseResponse], error)
	CreateTag(context.Context, *connect_go.Request[v1.CreateTagRequest]) (*connect_go.Response[v1.CreateTagResponse], error)
	GetTags(context.Context, *connect_go.Request[v1.GetTagsRequest]) (*connect_go.Response[v1.GetTagsResponse], error)
	UpdateTag(context.Context, *connect_go.Request[v1.UpdateTagRequest]) (*connect_go.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error)
	RearrangeTags(context.Context, *connect_go.Request[v1.RearrangeTagsRequest]) (*connect_go.Response[v1.RearrangeTagsResponse], error)
}

// NewTimetableServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTimetableServiceHandler(svc TimetableServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	timetableServiceGetCoursesHandler := connect_go.NewUnaryHandler(
		TimetableServiceGetCoursesProcedure,
		svc.GetCourses,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	timetableServiceCreateRegisteredCoursesByCodesHandler := connect_go.NewUnaryHandler(
		TimetableServiceCreateRegisteredCoursesByCodesProcedure,
		svc.CreateRegisteredCoursesByCodes,
		opts...,
	)
	timetableServiceCreateRegisteredCourseManuallyHandler := connect_go.NewUnaryHandler(
		TimetableServiceCreateRegisteredCourseManuallyProcedure,
		svc.CreateRegisteredCourseManually,
		opts...,
	)
	timetableServiceGetRegisteredCoursesHandler := connect_go.NewUnaryHandler(
		TimetableServiceGetRegisteredCoursesProcedure,
		svc.GetRegisteredCourses,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	timetableServiceUpdateRegisteredCourseHandler := connect_go.NewUnaryHandler(
		TimetableServiceUpdateRegisteredCourseProcedure,
		svc.UpdateRegisteredCourse,
		opts...,
	)
	timetableServiceDeleteRegisteredCourseHandler := connect_go.NewUnaryHandler(
		TimetableServiceDeleteRegisteredCourseProcedure,
		svc.DeleteRegisteredCourse,
		opts...,
	)
	timetableServiceCreateTagHandler := connect_go.NewUnaryHandler(
		TimetableServiceCreateTagProcedure,
		svc.CreateTag,
		opts...,
	)
	timetableServiceGetTagsHandler := connect_go.NewUnaryHandler(
		TimetableServiceGetTagsProcedure,
		svc.GetTags,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	timetableServiceUpdateTagHandler := connect_go.NewUnaryHandler(
		TimetableServiceUpdateTagProcedure,
		svc.UpdateTag,
		opts...,
	)
	timetableServiceDeleteTagHandler := connect_go.NewUnaryHandler(
		TimetableServiceDeleteTagProcedure,
		svc.DeleteTag,
		opts...,
	)
	timetableServiceRearrangeTagsHandler := connect_go.NewUnaryHandler(
		TimetableServiceRearrangeTagsProcedure,
		svc.RearrangeTags,
		opts...,
	)
	return "/timetable.v1.TimetableService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TimetableServiceGetCoursesProcedure:
			timetableServiceGetCoursesHandler.ServeHTTP(w, r)
		case TimetableServiceCreateRegisteredCoursesByCodesProcedure:
			timetableServiceCreateRegisteredCoursesByCodesHandler.ServeHTTP(w, r)
		case TimetableServiceCreateRegisteredCourseManuallyProcedure:
			timetableServiceCreateRegisteredCourseManuallyHandler.ServeHTTP(w, r)
		case TimetableServiceGetRegisteredCoursesProcedure:
			timetableServiceGetRegisteredCoursesHandler.ServeHTTP(w, r)
		case TimetableServiceUpdateRegisteredCourseProcedure:
			timetableServiceUpdateRegisteredCourseHandler.ServeHTTP(w, r)
		case TimetableServiceDeleteRegisteredCourseProcedure:
			timetableServiceDeleteRegisteredCourseHandler.ServeHTTP(w, r)
		case TimetableServiceCreateTagProcedure:
			timetableServiceCreateTagHandler.ServeHTTP(w, r)
		case TimetableServiceGetTagsProcedure:
			timetableServiceGetTagsHandler.ServeHTTP(w, r)
		case TimetableServiceUpdateTagProcedure:
			timetableServiceUpdateTagHandler.ServeHTTP(w, r)
		case TimetableServiceDeleteTagProcedure:
			timetableServiceDeleteTagHandler.ServeHTTP(w, r)
		case TimetableServiceRearrangeTagsProcedure:
			timetableServiceRearrangeTagsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTimetableServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTimetableServiceHandler struct{}

func (UnimplementedTimetableServiceHandler) GetCourses(context.Context, *connect_go.Request[v1.GetCoursesRequest]) (*connect_go.Response[v1.GetCoursesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.GetCourses is not implemented"))
}

func (UnimplementedTimetableServiceHandler) CreateRegisteredCoursesByCodes(context.Context, *connect_go.Request[v1.CreateRegisteredCoursesByCodesRequest]) (*connect_go.Response[v1.CreateRegisteredCoursesByCodesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.CreateRegisteredCoursesByCodes is not implemented"))
}

func (UnimplementedTimetableServiceHandler) CreateRegisteredCourseManually(context.Context, *connect_go.Request[v1.CreateRegisteredCourseManuallyRequest]) (*connect_go.Response[v1.CreateRegisteredCourseManuallyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.CreateRegisteredCourseManually is not implemented"))
}

func (UnimplementedTimetableServiceHandler) GetRegisteredCourses(context.Context, *connect_go.Request[v1.GetRegisteredCoursesRequest]) (*connect_go.Response[v1.GetRegisteredCoursesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.GetRegisteredCourses is not implemented"))
}

func (UnimplementedTimetableServiceHandler) UpdateRegisteredCourse(context.Context, *connect_go.Request[v1.UpdateRegisteredCourseRequest]) (*connect_go.Response[v1.UpdateRegisteredCourseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.UpdateRegisteredCourse is not implemented"))
}

func (UnimplementedTimetableServiceHandler) DeleteRegisteredCourse(context.Context, *connect_go.Request[v1.DeleteRegisteredCourseRequest]) (*connect_go.Response[v1.DeleteRegisteredCourseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.DeleteRegisteredCourse is not implemented"))
}

func (UnimplementedTimetableServiceHandler) CreateTag(context.Context, *connect_go.Request[v1.CreateTagRequest]) (*connect_go.Response[v1.CreateTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.CreateTag is not implemented"))
}

func (UnimplementedTimetableServiceHandler) GetTags(context.Context, *connect_go.Request[v1.GetTagsRequest]) (*connect_go.Response[v1.GetTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.GetTags is not implemented"))
}

func (UnimplementedTimetableServiceHandler) UpdateTag(context.Context, *connect_go.Request[v1.UpdateTagRequest]) (*connect_go.Response[v1.UpdateTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.UpdateTag is not implemented"))
}

func (UnimplementedTimetableServiceHandler) DeleteTag(context.Context, *connect_go.Request[v1.DeleteTagRequest]) (*connect_go.Response[v1.DeleteTagResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.DeleteTag is not implemented"))
}

func (UnimplementedTimetableServiceHandler) RearrangeTags(context.Context, *connect_go.Request[v1.RearrangeTagsRequest]) (*connect_go.Response[v1.RearrangeTagsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("timetable.v1.TimetableService.RearrangeTags is not implemented"))
}
