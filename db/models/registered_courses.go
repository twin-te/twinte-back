// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// RegisteredCourse is an object representing the database table.
type RegisteredCourse struct {
	ID         string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string            `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Year       int16             `boil:"year" json:"year" toml:"year" yaml:"year"`
	CourseID   null.String       `boil:"course_id" json:"course_id,omitempty" toml:"course_id" yaml:"course_id,omitempty"`
	Name       null.String       `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Instractor null.String       `boil:"instractor" json:"instractor,omitempty" toml:"instractor" yaml:"instractor,omitempty"`
	Credit     types.NullDecimal `boil:"credit" json:"credit,omitempty" toml:"credit" yaml:"credit,omitempty"`
	Methods    types.StringArray `boil:"methods" json:"methods,omitempty" toml:"methods" yaml:"methods,omitempty"`
	Schedules  null.JSON         `boil:"schedules" json:"schedules,omitempty" toml:"schedules" yaml:"schedules,omitempty"`
	Memo       string            `boil:"memo" json:"memo" toml:"memo" yaml:"memo"`
	Attendance int               `boil:"attendance" json:"attendance" toml:"attendance" yaml:"attendance"`
	Absence    int               `boil:"absence" json:"absence" toml:"absence" yaml:"absence"`
	Late       int               `boil:"late" json:"late" toml:"late" yaml:"late"`

	R *registeredCourseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L registeredCourseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RegisteredCourseColumns = struct {
	ID         string
	UserID     string
	Year       string
	CourseID   string
	Name       string
	Instractor string
	Credit     string
	Methods    string
	Schedules  string
	Memo       string
	Attendance string
	Absence    string
	Late       string
}{
	ID:         "id",
	UserID:     "user_id",
	Year:       "year",
	CourseID:   "course_id",
	Name:       "name",
	Instractor: "instractor",
	Credit:     "credit",
	Methods:    "methods",
	Schedules:  "schedules",
	Memo:       "memo",
	Attendance: "attendance",
	Absence:    "absence",
	Late:       "late",
}

var RegisteredCourseTableColumns = struct {
	ID         string
	UserID     string
	Year       string
	CourseID   string
	Name       string
	Instractor string
	Credit     string
	Methods    string
	Schedules  string
	Memo       string
	Attendance string
	Absence    string
	Late       string
}{
	ID:         "registered_courses.id",
	UserID:     "registered_courses.user_id",
	Year:       "registered_courses.year",
	CourseID:   "registered_courses.course_id",
	Name:       "registered_courses.name",
	Instractor: "registered_courses.instractor",
	Credit:     "registered_courses.credit",
	Methods:    "registered_courses.methods",
	Schedules:  "registered_courses.schedules",
	Memo:       "registered_courses.memo",
	Attendance: "registered_courses.attendance",
	Absence:    "registered_courses.absence",
	Late:       "registered_courses.late",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RegisteredCourseWhere = struct {
	ID         whereHelperstring
	UserID     whereHelperstring
	Year       whereHelperint16
	CourseID   whereHelpernull_String
	Name       whereHelpernull_String
	Instractor whereHelpernull_String
	Credit     whereHelpertypes_NullDecimal
	Methods    whereHelpertypes_StringArray
	Schedules  whereHelpernull_JSON
	Memo       whereHelperstring
	Attendance whereHelperint
	Absence    whereHelperint
	Late       whereHelperint
}{
	ID:         whereHelperstring{field: "\"registered_courses\".\"id\""},
	UserID:     whereHelperstring{field: "\"registered_courses\".\"user_id\""},
	Year:       whereHelperint16{field: "\"registered_courses\".\"year\""},
	CourseID:   whereHelpernull_String{field: "\"registered_courses\".\"course_id\""},
	Name:       whereHelpernull_String{field: "\"registered_courses\".\"name\""},
	Instractor: whereHelpernull_String{field: "\"registered_courses\".\"instractor\""},
	Credit:     whereHelpertypes_NullDecimal{field: "\"registered_courses\".\"credit\""},
	Methods:    whereHelpertypes_StringArray{field: "\"registered_courses\".\"methods\""},
	Schedules:  whereHelpernull_JSON{field: "\"registered_courses\".\"schedules\""},
	Memo:       whereHelperstring{field: "\"registered_courses\".\"memo\""},
	Attendance: whereHelperint{field: "\"registered_courses\".\"attendance\""},
	Absence:    whereHelperint{field: "\"registered_courses\".\"absence\""},
	Late:       whereHelperint{field: "\"registered_courses\".\"late\""},
}

// RegisteredCourseRels is where relationship names are stored.
var RegisteredCourseRels = struct {
	Tags string
}{
	Tags: "Tags",
}

// registeredCourseR is where relationships are stored.
type registeredCourseR struct {
	Tags TagSlice `boil:"Tags" json:"Tags" toml:"Tags" yaml:"Tags"`
}

// NewStruct creates a new relationship struct
func (*registeredCourseR) NewStruct() *registeredCourseR {
	return &registeredCourseR{}
}

func (r *registeredCourseR) GetTags() TagSlice {
	if r == nil {
		return nil
	}
	return r.Tags
}

// registeredCourseL is where Load methods for each relationship are stored.
type registeredCourseL struct{}

var (
	registeredCourseAllColumns            = []string{"id", "user_id", "year", "course_id", "name", "instractor", "credit", "methods", "schedules", "memo", "attendance", "absence", "late"}
	registeredCourseColumnsWithoutDefault = []string{"id", "user_id", "year", "memo", "attendance", "absence", "late"}
	registeredCourseColumnsWithDefault    = []string{"course_id", "name", "instractor", "credit", "methods", "schedules"}
	registeredCoursePrimaryKeyColumns     = []string{"id"}
	registeredCourseGeneratedColumns      = []string{}
)

type (
	// RegisteredCourseSlice is an alias for a slice of pointers to RegisteredCourse.
	// This should almost always be used instead of []RegisteredCourse.
	RegisteredCourseSlice []*RegisteredCourse
	// RegisteredCourseHook is the signature for custom RegisteredCourse hook methods
	RegisteredCourseHook func(context.Context, boil.ContextExecutor, *RegisteredCourse) error

	registeredCourseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	registeredCourseType                 = reflect.TypeOf(&RegisteredCourse{})
	registeredCourseMapping              = queries.MakeStructMapping(registeredCourseType)
	registeredCoursePrimaryKeyMapping, _ = queries.BindMapping(registeredCourseType, registeredCourseMapping, registeredCoursePrimaryKeyColumns)
	registeredCourseInsertCacheMut       sync.RWMutex
	registeredCourseInsertCache          = make(map[string]insertCache)
	registeredCourseUpdateCacheMut       sync.RWMutex
	registeredCourseUpdateCache          = make(map[string]updateCache)
	registeredCourseUpsertCacheMut       sync.RWMutex
	registeredCourseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var registeredCourseAfterSelectHooks []RegisteredCourseHook

var registeredCourseBeforeInsertHooks []RegisteredCourseHook
var registeredCourseAfterInsertHooks []RegisteredCourseHook

var registeredCourseBeforeUpdateHooks []RegisteredCourseHook
var registeredCourseAfterUpdateHooks []RegisteredCourseHook

var registeredCourseBeforeDeleteHooks []RegisteredCourseHook
var registeredCourseAfterDeleteHooks []RegisteredCourseHook

var registeredCourseBeforeUpsertHooks []RegisteredCourseHook
var registeredCourseAfterUpsertHooks []RegisteredCourseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RegisteredCourse) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RegisteredCourse) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RegisteredCourse) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RegisteredCourse) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RegisteredCourse) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RegisteredCourse) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RegisteredCourse) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RegisteredCourse) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RegisteredCourse) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range registeredCourseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegisteredCourseHook registers your hook function for all future operations.
func AddRegisteredCourseHook(hookPoint boil.HookPoint, registeredCourseHook RegisteredCourseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		registeredCourseAfterSelectHooks = append(registeredCourseAfterSelectHooks, registeredCourseHook)
	case boil.BeforeInsertHook:
		registeredCourseBeforeInsertHooks = append(registeredCourseBeforeInsertHooks, registeredCourseHook)
	case boil.AfterInsertHook:
		registeredCourseAfterInsertHooks = append(registeredCourseAfterInsertHooks, registeredCourseHook)
	case boil.BeforeUpdateHook:
		registeredCourseBeforeUpdateHooks = append(registeredCourseBeforeUpdateHooks, registeredCourseHook)
	case boil.AfterUpdateHook:
		registeredCourseAfterUpdateHooks = append(registeredCourseAfterUpdateHooks, registeredCourseHook)
	case boil.BeforeDeleteHook:
		registeredCourseBeforeDeleteHooks = append(registeredCourseBeforeDeleteHooks, registeredCourseHook)
	case boil.AfterDeleteHook:
		registeredCourseAfterDeleteHooks = append(registeredCourseAfterDeleteHooks, registeredCourseHook)
	case boil.BeforeUpsertHook:
		registeredCourseBeforeUpsertHooks = append(registeredCourseBeforeUpsertHooks, registeredCourseHook)
	case boil.AfterUpsertHook:
		registeredCourseAfterUpsertHooks = append(registeredCourseAfterUpsertHooks, registeredCourseHook)
	}
}

// One returns a single registeredCourse record from the query.
func (q registeredCourseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RegisteredCourse, error) {
	o := &RegisteredCourse{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for registered_courses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RegisteredCourse records from the query.
func (q registeredCourseQuery) All(ctx context.Context, exec boil.ContextExecutor) (RegisteredCourseSlice, error) {
	var o []*RegisteredCourse

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to RegisteredCourse slice")
	}

	if len(registeredCourseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RegisteredCourse records in the query.
func (q registeredCourseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count registered_courses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q registeredCourseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if registered_courses exists")
	}

	return count > 0, nil
}

// Tags retrieves all the tag's Tags with an executor.
func (o *RegisteredCourse) Tags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"registered_course_tags\" on \"tags\".\"id\" = \"registered_course_tags\".\"tag\""),
		qm.Where("\"registered_course_tags\".\"registered_course\"=?", o.ID),
	)

	return Tags(queryMods...)
}

// LoadTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (registeredCourseL) LoadTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRegisteredCourse interface{}, mods queries.Applicator) error {
	var slice []*RegisteredCourse
	var object *RegisteredCourse

	if singular {
		var ok bool
		object, ok = maybeRegisteredCourse.(*RegisteredCourse)
		if !ok {
			object = new(RegisteredCourse)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRegisteredCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRegisteredCourse))
			}
		}
	} else {
		s, ok := maybeRegisteredCourse.(*[]*RegisteredCourse)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRegisteredCourse)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRegisteredCourse))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &registeredCourseR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &registeredCourseR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.Select("\"tags\".\"id\", \"tags\".\"user_id\", \"tags\".\"name\", \"tags\".\"position\", \"a\".\"registered_course\""),
		qm.From("\"tags\""),
		qm.InnerJoin("\"registered_course_tags\" as \"a\" on \"tags\".\"id\" = \"a\".\"tag\""),
		qm.WhereIn("\"a\".\"registered_course\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag

	var localJoinCols []string
	for results.Next() {
		one := new(Tag)
		var localJoinCol string

		err = results.Scan(&one.ID, &one.UserID, &one.Name, &one.Position, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tags")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tags")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.RegisteredCourses = append(foreign.R.RegisteredCourses, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tags = append(local.R.Tags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.RegisteredCourses = append(foreign.R.RegisteredCourses, local)
				break
			}
		}
	}

	return nil
}

// AddTags adds the given related objects to the existing relationships
// of the registered_course, optionally inserting them as new records.
// Appends related to o.R.Tags.
// Sets related.R.RegisteredCourses appropriately.
func (o *RegisteredCourse) AddTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"registered_course_tags\" (\"registered_course\", \"tag\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, query)
			fmt.Fprintln(writer, values)
		}
		_, err = exec.ExecContext(ctx, query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &registeredCourseR{
			Tags: related,
		}
	} else {
		o.R.Tags = append(o.R.Tags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				RegisteredCourses: RegisteredCourseSlice{o},
			}
		} else {
			rel.R.RegisteredCourses = append(rel.R.RegisteredCourses, o)
		}
	}
	return nil
}

// SetTags removes all previously related items of the
// registered_course replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RegisteredCourses's Tags accordingly.
// Replaces o.R.Tags with related.
// Sets related.R.RegisteredCourses's Tags accordingly.
func (o *RegisteredCourse) SetTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	query := "delete from \"registered_course_tags\" where \"registered_course\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTagsFromRegisteredCoursesSlice(o, related)
	if o.R != nil {
		o.R.Tags = nil
	}

	return o.AddTags(ctx, exec, insert, related...)
}

// RemoveTags relationships from objects passed in.
// Removes related items from R.Tags (uses pointer comparison, removal does not keep order)
// Sets related.R.RegisteredCourses.
func (o *RegisteredCourse) RemoveTags(ctx context.Context, exec boil.ContextExecutor, related ...*Tag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	query := fmt.Sprintf(
		"delete from \"registered_course_tags\" where \"registered_course\" = $1 and \"tag\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err = exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTagsFromRegisteredCoursesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tags {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tags)
			if ln > 1 && i < ln-1 {
				o.R.Tags[i] = o.R.Tags[ln-1]
			}
			o.R.Tags = o.R.Tags[:ln-1]
			break
		}
	}

	return nil
}

func removeTagsFromRegisteredCoursesSlice(o *RegisteredCourse, related []*Tag) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.RegisteredCourses {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.RegisteredCourses)
			if ln > 1 && i < ln-1 {
				rel.R.RegisteredCourses[i] = rel.R.RegisteredCourses[ln-1]
			}
			rel.R.RegisteredCourses = rel.R.RegisteredCourses[:ln-1]
			break
		}
	}
}

// RegisteredCourses retrieves all the records using an executor.
func RegisteredCourses(mods ...qm.QueryMod) registeredCourseQuery {
	mods = append(mods, qm.From("\"registered_courses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"registered_courses\".*"})
	}

	return registeredCourseQuery{q}
}

// FindRegisteredCourse retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegisteredCourse(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RegisteredCourse, error) {
	registeredCourseObj := &RegisteredCourse{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"registered_courses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, registeredCourseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from registered_courses")
	}

	if err = registeredCourseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return registeredCourseObj, err
	}

	return registeredCourseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RegisteredCourse) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no registered_courses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registeredCourseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	registeredCourseInsertCacheMut.RLock()
	cache, cached := registeredCourseInsertCache[key]
	registeredCourseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			registeredCourseAllColumns,
			registeredCourseColumnsWithDefault,
			registeredCourseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(registeredCourseType, registeredCourseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(registeredCourseType, registeredCourseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"registered_courses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"registered_courses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into registered_courses")
	}

	if !cached {
		registeredCourseInsertCacheMut.Lock()
		registeredCourseInsertCache[key] = cache
		registeredCourseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RegisteredCourse.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RegisteredCourse) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	registeredCourseUpdateCacheMut.RLock()
	cache, cached := registeredCourseUpdateCache[key]
	registeredCourseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			registeredCourseAllColumns,
			registeredCoursePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update registered_courses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"registered_courses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, registeredCoursePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(registeredCourseType, registeredCourseMapping, append(wl, registeredCoursePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update registered_courses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for registered_courses")
	}

	if !cached {
		registeredCourseUpdateCacheMut.Lock()
		registeredCourseUpdateCache[key] = cache
		registeredCourseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q registeredCourseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for registered_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for registered_courses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegisteredCourseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"registered_courses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, registeredCoursePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in registeredCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all registeredCourse")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RegisteredCourse) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no registered_courses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(registeredCourseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	registeredCourseUpsertCacheMut.RLock()
	cache, cached := registeredCourseUpsertCache[key]
	registeredCourseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			registeredCourseAllColumns,
			registeredCourseColumnsWithDefault,
			registeredCourseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			registeredCourseAllColumns,
			registeredCoursePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert registered_courses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(registeredCoursePrimaryKeyColumns))
			copy(conflict, registeredCoursePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"registered_courses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(registeredCourseType, registeredCourseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(registeredCourseType, registeredCourseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert registered_courses")
	}

	if !cached {
		registeredCourseUpsertCacheMut.Lock()
		registeredCourseUpsertCache[key] = cache
		registeredCourseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RegisteredCourse record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RegisteredCourse) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no RegisteredCourse provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), registeredCoursePrimaryKeyMapping)
	sql := "DELETE FROM \"registered_courses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from registered_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for registered_courses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q registeredCourseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no registeredCourseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from registered_courses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for registered_courses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegisteredCourseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(registeredCourseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"registered_courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, registeredCoursePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from registeredCourse slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for registered_courses")
	}

	if len(registeredCourseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RegisteredCourse) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRegisteredCourse(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegisteredCourseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RegisteredCourseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), registeredCoursePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"registered_courses\".* FROM \"registered_courses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, registeredCoursePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in RegisteredCourseSlice")
	}

	*o = slice

	return nil
}

// RegisteredCourseExists checks if the RegisteredCourse row exists.
func RegisteredCourseExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"registered_courses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if registered_courses exists")
	}

	return exists, nil
}

// Exists checks if the RegisteredCourse row exists.
func (o *RegisteredCourse) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RegisteredCourseExists(ctx, exec, o.ID)
}
