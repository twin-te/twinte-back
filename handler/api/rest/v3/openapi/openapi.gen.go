// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for CourseDay.
const (
	CourseDayAnyTime     CourseDay = "AnyTime"
	CourseDayAppointment CourseDay = "Appointment"
	CourseDayFri         CourseDay = "Fri"
	CourseDayIntensive   CourseDay = "Intensive"
	CourseDayMon         CourseDay = "Mon"
	CourseDaySat         CourseDay = "Sat"
	CourseDaySun         CourseDay = "Sun"
	CourseDayThu         CourseDay = "Thu"
	CourseDayTue         CourseDay = "Tue"
	CourseDayUnknown     CourseDay = "Unknown"
	CourseDayWed         CourseDay = "Wed"
)

// Defines values for CourseMethod.
const (
	Asynchronous CourseMethod = "Asynchronous"
	FaceToFace   CourseMethod = "FaceToFace"
	Others       CourseMethod = "Others"
	Synchronous  CourseMethod = "Synchronous"
)

// Defines values for CourseModule.
const (
	CourseModuleFallA          CourseModule = "FallA"
	CourseModuleFallB          CourseModule = "FallB"
	CourseModuleFallC          CourseModule = "FallC"
	CourseModuleSpringA        CourseModule = "SpringA"
	CourseModuleSpringB        CourseModule = "SpringB"
	CourseModuleSpringC        CourseModule = "SpringC"
	CourseModuleSpringVacation CourseModule = "SpringVacation"
	CourseModuleSummerVacation CourseModule = "SummerVacation"
	CourseModuleUnknown        CourseModule = "Unknown"
)

// Defines values for PaymentStatus.
const (
	PaymentStatusCanceled  PaymentStatus = "Canceled"
	PaymentStatusPending   PaymentStatus = "Pending"
	PaymentStatusSucceeded PaymentStatus = "Succeeded"
)

// Defines values for PaymentType.
const (
	PaymentTypeOneTime      PaymentType = "OneTime"
	PaymentTypeSubscription PaymentType = "Subscription"
)

// Defines values for SchoolCalendarEventEventType.
const (
	Exam          SchoolCalendarEventEventType = "Exam"
	Holiday       SchoolCalendarEventEventType = "Holiday"
	Other         SchoolCalendarEventEventType = "Other"
	PublicHoliday SchoolCalendarEventEventType = "PublicHoliday"
	SubstituteDay SchoolCalendarEventEventType = "SubstituteDay"
)

// Defines values for SchoolCalendarModuleModule.
const (
	FallA          SchoolCalendarModuleModule = "FallA"
	FallB          SchoolCalendarModuleModule = "FallB"
	FallC          SchoolCalendarModuleModule = "FallC"
	SpringA        SchoolCalendarModuleModule = "SpringA"
	SpringB        SchoolCalendarModuleModule = "SpringB"
	SpringC        SchoolCalendarModuleModule = "SpringC"
	SpringVacation SchoolCalendarModuleModule = "SpringVacation"
	SummerVacation SchoolCalendarModuleModule = "SummerVacation"
)

// Defines values for SubscriptionStatus.
const (
	SubscriptionStatusActive   SubscriptionStatus = "Active"
	SubscriptionStatusCanceled SubscriptionStatus = "Canceled"
)

// Defines values for PostCoursesSearchJSONBodySearchMode.
const (
	Contain PostCoursesSearchJSONBodySearchMode = "Contain"
	Cover   PostCoursesSearchJSONBodySearchMode = "Cover"
)

// Course defines model for Course.
type Course struct {
	Code              string             `json:"code"`
	Credit            float32            `json:"credit"`
	HasParseError     bool               `json:"hasParseError"`
	Id                openapi_types.UUID `json:"id"`
	Instructor        string             `json:"instructor"`
	IsAnnual          bool               `json:"isAnnual"`
	Methods           []CourseMethod     `json:"methods"`
	Name              string             `json:"name"`
	Overview          string             `json:"overview"`
	RecommendedGrades []int              `json:"recommendedGrades"`
	Remarks           string             `json:"remarks"`
	Schedules         []CourseSchedule   `json:"schedules"`
	Year              int                `json:"year"`
}

// CourseDay defines model for CourseDay.
type CourseDay string

// CourseMethod defines model for CourseMethod.
type CourseMethod string

// CourseModule defines model for CourseModule.
type CourseModule string

// CourseSchedule defines model for CourseSchedule.
type CourseSchedule struct {
	Day    CourseDay    `json:"day"`
	Module CourseModule `json:"module"`
	Period int          `json:"period"`
	Room   string       `json:"room"`
}

// Error defines model for Error.
type Error struct {
	Errors  []map[string]interface{} `json:"errors"`
	Message string                   `json:"message"`
}

// Information defines model for Information.
type Information struct {
	Content     string             `json:"content"`
	Id          openapi_types.UUID `json:"id"`
	PublishedAt time.Time          `json:"publishedAt"`
	Read        *bool              `json:"read,omitempty"`
	Title       string             `json:"title"`
}

// Payment defines model for Payment.
type Payment struct {
	Amount  int                `json:"amount"`
	Created openapi_types.Date `json:"created"`
	Id      string             `json:"id"`
	Status  PaymentStatus      `json:"status"`
	Type    PaymentType        `json:"type"`
}

// PaymentStatus defines model for Payment.Status.
type PaymentStatus string

// PaymentType defines model for Payment.Type.
type PaymentType string

// PaymentUser defines model for PaymentUser.
type PaymentUser struct {
	DisplayName   *string            `json:"displayName,omitempty"`
	Link          *string            `json:"link,omitempty"`
	PaymentUserId string             `json:"paymentUserId"`
	TwinteUserId  openapi_types.UUID `json:"twinteUserId"`
}

// RegisteredCourse defines model for RegisteredCourse.
type RegisteredCourse struct {
	Absence    int                `json:"absence"`
	Attendance int                `json:"attendance"`
	Course     *Course            `json:"course,omitempty"`
	Credit     *float32           `json:"credit,omitempty"`
	Id         openapi_types.UUID `json:"id"`
	Instructor *string            `json:"instructor,omitempty"`
	Late       int                `json:"late"`
	Memo       string             `json:"memo"`
	Methods    *[]CourseMethod    `json:"methods,omitempty"`
	Name       *string            `json:"name,omitempty"`
	Schedules  *[]CourseSchedule  `json:"schedules,omitempty"`
	Tags       []TagIdOnly        `json:"tags"`
	UserId     openapi_types.UUID `json:"userId"`
	Year       int                `json:"year"`
}

// RegisteredCourseWithoutID defines model for RegisteredCourseWithoutID.
type RegisteredCourseWithoutID struct {
	Absence    int               `json:"absence"`
	Attendance int               `json:"attendance"`
	Credit     *float32          `json:"credit,omitempty"`
	Instructor *string           `json:"instructor,omitempty"`
	Late       int               `json:"late"`
	Memo       string            `json:"memo"`
	Methods    *[]CourseMethod   `json:"methods,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Schedules  *[]CourseSchedule `json:"schedules,omitempty"`
	Tags       []TagIdOnly       `json:"tags"`
	Year       int               `json:"year"`
}

// SchoolCalendarEvent defines model for SchoolCalendarEvent.
type SchoolCalendarEvent struct {
	ChangeTo    *CourseDay                   `json:"changeTo,omitempty"`
	Date        openapi_types.Date           `json:"date"`
	Description string                       `json:"description"`
	EventType   SchoolCalendarEventEventType `json:"eventType"`
}

// SchoolCalendarEventEventType defines model for SchoolCalendarEvent.EventType.
type SchoolCalendarEventEventType string

// SchoolCalendarModule defines model for SchoolCalendarModule.
type SchoolCalendarModule struct {
	End    openapi_types.Date         `json:"end"`
	Module SchoolCalendarModuleModule `json:"module"`
	Start  openapi_types.Date         `json:"start"`

	// Year 年度
	Year int `json:"year"`
}

// SchoolCalendarModuleModule defines model for SchoolCalendarModule.Module.
type SchoolCalendarModuleModule string

// SearchCourseTimetableQuery defines model for SearchCourseTimetableQuery.
type SearchCourseTimetableQuery struct {
	FallA          *SearchCourseTimetableQueryDays `json:"FallA,omitempty"`
	FallB          *SearchCourseTimetableQueryDays `json:"FallB,omitempty"`
	FallC          *SearchCourseTimetableQueryDays `json:"FallC,omitempty"`
	SpringA        *SearchCourseTimetableQueryDays `json:"SpringA,omitempty"`
	SpringB        *SearchCourseTimetableQueryDays `json:"SpringB,omitempty"`
	SpringC        *SearchCourseTimetableQueryDays `json:"SpringC,omitempty"`
	SpringVacation *SearchCourseTimetableQueryDays `json:"SpringVacation,omitempty"`
	SummerVacation *SearchCourseTimetableQueryDays `json:"SummerVacation,omitempty"`
}

// SearchCourseTimetableQueryDays defines model for SearchCourseTimetableQueryDays.
type SearchCourseTimetableQueryDays struct {
	// AnyTime 指定しなかった場合はfalseとみなされます
	AnyTime *SearchCourseTimetableQueryPeriods `json:"AnyTime,omitempty"`

	// Appointment 指定しなかった場合はfalseとみなされます
	Appointment *SearchCourseTimetableQueryPeriods `json:"Appointment,omitempty"`

	// Fri 指定しなかった場合はfalseとみなされます
	Fri *SearchCourseTimetableQueryPeriods `json:"Fri,omitempty"`

	// Intensive 指定しなかった場合はfalseとみなされます
	Intensive *SearchCourseTimetableQueryPeriods `json:"Intensive,omitempty"`

	// Mon 指定しなかった場合はfalseとみなされます
	Mon *SearchCourseTimetableQueryPeriods `json:"Mon,omitempty"`

	// Sat 指定しなかった場合はfalseとみなされます
	Sat *SearchCourseTimetableQueryPeriods `json:"Sat,omitempty"`

	// Sun 指定しなかった場合はfalseとみなされます
	Sun *SearchCourseTimetableQueryPeriods `json:"Sun,omitempty"`

	// Thu 指定しなかった場合はfalseとみなされます
	Thu *SearchCourseTimetableQueryPeriods `json:"Thu,omitempty"`

	// Tue 指定しなかった場合はfalseとみなされます
	Tue *SearchCourseTimetableQueryPeriods `json:"Tue,omitempty"`

	// Wed 指定しなかった場合はfalseとみなされます
	Wed *SearchCourseTimetableQueryPeriods `json:"Wed,omitempty"`
}

// SearchCourseTimetableQueryPeriods 指定しなかった場合はfalseとみなされます
type SearchCourseTimetableQueryPeriods struct {
	// N0 時限が不明な授業は0になっているためそれらも検索したい場合はtrueに（集中授業に多い）
	N0 *bool `json:"0,omitempty"`
	N1 *bool `json:"1,omitempty"`
	N2 *bool `json:"2,omitempty"`
	N3 *bool `json:"3,omitempty"`
	N4 *bool `json:"4,omitempty"`
	N5 *bool `json:"5,omitempty"`
	N6 *bool `json:"6,omitempty"`
	N7 *bool `json:"7,omitempty"`
	N8 *bool `json:"8,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	Created openapi_types.Date `json:"created"`
	Id      string             `json:"id"`
	Plans   []struct {
		Amount int    `json:"amount"`
		Id     string `json:"id"`
		Name   string `json:"name"`
	} `json:"plans"`
	Status SubscriptionStatus `json:"status"`
}

// SubscriptionStatus defines model for Subscription.Status.
type SubscriptionStatus string

// Tag defines model for Tag.
type Tag struct {
	Id       openapi_types.UUID `json:"id"`
	Name     string             `json:"name"`
	Position *int               `json:"position,omitempty"`
	UserId   openapi_types.UUID `json:"userId"`
}

// TagIdOnly defines model for TagIdOnly.
type TagIdOnly struct {
	Id openapi_types.UUID `json:"id"`
}

// TagPositionOnly defines model for TagPositionOnly.
type TagPositionOnly struct {
	Id       openapi_types.UUID `json:"id"`
	Position int                `json:"position"`
}

// User defines model for User.
type User struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// BadRequestError defines model for BadRequestError.
type BadRequestError = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFoundError defines model for NotFoundError.
type NotFoundError = Error

// UnauthorizedError defines model for UnauthorizedError.
type UnauthorizedError = Error

// GetCoursesParams defines parameters for GetCourses.
type GetCoursesParams struct {
	Year int `form:"year" json:"year"`

	// Codes 複数講義をカンマ区切りで指定できる
	Codes string `form:"codes" json:"codes"`
}

// PostCoursesSearchJSONBody defines parameters for PostCoursesSearch.
type PostCoursesSearchJSONBody struct {
	Codes    *[]string `json:"codes,omitempty"`
	Keywords []string  `json:"keywords"`
	Limit    *int      `json:"limit,omitempty"`
	Offset   *int      `json:"offset,omitempty"`

	// SearchMode 検索モード Cover 指定した時限と講義の開講日時が一部でも被っていれば対象とみなす Contain 指定した時限に収まっている講義のみ対象とみなす デフォルトはCover
	SearchMode *PostCoursesSearchJSONBodySearchMode `json:"searchMode,omitempty"`
	Timetable  *SearchCourseTimetableQuery          `json:"timetable,omitempty"`
	Year       int                                  `json:"year"`
}

// PostCoursesSearchJSONBodySearchMode defines parameters for PostCoursesSearch.
type PostCoursesSearchJSONBodySearchMode string

// PostDonationSessionOnetimeJSONBody defines parameters for PostDonationSessionOnetime.
type PostDonationSessionOnetimeJSONBody struct {
	Amount int `json:"amount"`
}

// PostDonationSessionSubscriptionJSONBody defines parameters for PostDonationSessionSubscription.
type PostDonationSessionSubscriptionJSONBody struct {
	PlanId string `json:"planId"`
}

// PatchDonationUsersMeJSONBody defines parameters for PatchDonationUsersMe.
type PatchDonationUsersMeJSONBody struct {
	DisplayName *string `json:"displayName,omitempty"`
	Link        *string `json:"link,omitempty"`
}

// GetInformationParams defines parameters for GetInformation.
type GetInformationParams struct {
	Limit  int `form:"limit" json:"limit"`
	Offset int `form:"offset" json:"offset"`
}

// PutInformationIdJSONBody defines parameters for PutInformationId.
type PutInformationIdJSONBody struct {
	Read bool `json:"read"`
}

// GetRegisteredCoursesParams defines parameters for GetRegisteredCourses.
type GetRegisteredCoursesParams struct {
	Year int `form:"year" json:"year"`
}

// PostRegisteredCoursesJSONBody defines parameters for PostRegisteredCourses.
type PostRegisteredCoursesJSONBody struct {
	union json.RawMessage
}

// PostRegisteredCoursesJSONBody0 defines parameters for PostRegisteredCourses.
type PostRegisteredCoursesJSONBody0 struct {
	Code string `json:"code"`
	Year int    `json:"year"`
}

// PostRegisteredCoursesJSONBody1 defines parameters for PostRegisteredCourses.
type PostRegisteredCoursesJSONBody1 = []struct {
	Code string `json:"code"`
	Year int    `json:"year"`
}

// PostRegisteredCoursesJSONBody2 defines parameters for PostRegisteredCourses.
type PostRegisteredCoursesJSONBody2 struct {
	Credit     float32          `json:"credit"`
	Instructor string           `json:"instructor"`
	Methods    []CourseMethod   `json:"methods"`
	Name       string           `json:"name"`
	Schedules  []CourseSchedule `json:"schedules"`
	Tags       []TagIdOnly      `json:"tags"`
	Year       int              `json:"year"`
}

// PutRegisteredCoursesIdJSONBody defines parameters for PutRegisteredCoursesId.
type PutRegisteredCoursesIdJSONBody struct {
	Absence    int `json:"absence"`
	Attendance int `json:"attendance"`
	Course     *struct {
		Id openapi_types.UUID `json:"id"`
	} `json:"course,omitempty"`
	Credit     *float32          `json:"credit,omitempty"`
	Instructor *string           `json:"instructor,omitempty"`
	Late       int               `json:"late"`
	Memo       string            `json:"memo"`
	Methods    *[]CourseMethod   `json:"methods,omitempty"`
	Name       *string           `json:"name,omitempty"`
	Schedules  *[]CourseSchedule `json:"schedules,omitempty"`
	Tags       []TagIdOnly       `json:"tags"`
	Year       int               `json:"year"`
}

// GetSchoolCalendarEventsParams defines parameters for GetSchoolCalendarEvents.
type GetSchoolCalendarEventsParams struct {
	Year int `form:"year" json:"year"`
}

// GetSchoolCalendarModulesParams defines parameters for GetSchoolCalendarModules.
type GetSchoolCalendarModulesParams struct {
	Year int `form:"year" json:"year"`
}

// PatchTagsJSONBody defines parameters for PatchTags.
type PatchTagsJSONBody = []TagPositionOnly

// PostTagsJSONBody defines parameters for PostTags.
type PostTagsJSONBody struct {
	Name string `json:"name"`
}

// PutTagsIdJSONBody defines parameters for PutTagsId.
type PutTagsIdJSONBody struct {
	Name string `json:"name"`
}

// PostCoursesSearchJSONRequestBody defines body for PostCoursesSearch for application/json ContentType.
type PostCoursesSearchJSONRequestBody PostCoursesSearchJSONBody

// PostDonationSessionOnetimeJSONRequestBody defines body for PostDonationSessionOnetime for application/json ContentType.
type PostDonationSessionOnetimeJSONRequestBody PostDonationSessionOnetimeJSONBody

// PostDonationSessionSubscriptionJSONRequestBody defines body for PostDonationSessionSubscription for application/json ContentType.
type PostDonationSessionSubscriptionJSONRequestBody PostDonationSessionSubscriptionJSONBody

// PatchDonationUsersMeJSONRequestBody defines body for PatchDonationUsersMe for application/json ContentType.
type PatchDonationUsersMeJSONRequestBody PatchDonationUsersMeJSONBody

// PutInformationIdJSONRequestBody defines body for PutInformationId for application/json ContentType.
type PutInformationIdJSONRequestBody PutInformationIdJSONBody

// PostRegisteredCoursesJSONRequestBody defines body for PostRegisteredCourses for application/json ContentType.
type PostRegisteredCoursesJSONRequestBody PostRegisteredCoursesJSONBody

// PutRegisteredCoursesIdJSONRequestBody defines body for PutRegisteredCoursesId for application/json ContentType.
type PutRegisteredCoursesIdJSONRequestBody PutRegisteredCoursesIdJSONBody

// PatchTagsJSONRequestBody defines body for PatchTags for application/json ContentType.
type PatchTagsJSONRequestBody = PatchTagsJSONBody

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody PostTagsJSONBody

// PutTagsIdJSONRequestBody defines body for PutTagsId for application/json ContentType.
type PutTagsIdJSONRequestBody PutTagsIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 指定した複数の講義を取得する
	// (GET /courses)
	GetCourses(ctx echo.Context, params GetCoursesParams) error
	// 講義を検索する
	// (POST /courses/search)
	PostCoursesSearch(ctx echo.Context) error
	// 指定した講義を取得する
	// (GET /courses/{year}/{code})
	GetCoursesYearCode(ctx echo.Context, year int, code string) error
	// 寄付総額を取得
	// (GET /donation/aggregate/totalAmount)
	GetDonationAggregateTotalAmount(ctx echo.Context) error
	// 寄付してくれたユーザーで掲載OKのユーザー一覧を取得
	// (GET /donation/aggregate/users)
	GetDonationAggregateUsers(ctx echo.Context) error
	// 請求一覧を取得
	// (GET /donation/payment)
	GetDonationPayment(ctx echo.Context) error
	// 単発寄付のセッションを作成
	// (POST /donation/session/onetime)
	PostDonationSessionOnetime(ctx echo.Context) error
	// サブスク寄付のセッションを作成
	// (POST /donation/session/subscription)
	PostDonationSessionSubscription(ctx echo.Context) error
	// 契約中のサブスクを取得する
	// (GET /donation/subscriptions)
	GetDonationSubscriptions(ctx echo.Context) error
	// 指定したサブスクを解除
	// (DELETE /donation/subscriptions/{id})
	DeleteDonationSubscriptionsId(ctx echo.Context, id string) error
	// 支払いユーザー取得
	// (GET /donation/users/me)
	GetDonationUsersMe(ctx echo.Context) error
	// 支払いユーザー情報更新
	// (PATCH /donation/users/me)
	PatchDonationUsersMe(ctx echo.Context) error
	// お知らせを取得
	// (GET /information)
	GetInformation(ctx echo.Context, params GetInformationParams) error
	// お知らせの既読
	// (PUT /information/{id})
	PutInformationId(ctx echo.Context, id openapi_types.UUID) error
	// 登録済みの講義を返す
	// (GET /registered-courses)
	GetRegisteredCourses(ctx echo.Context, params GetRegisteredCoursesParams) error
	// 講義を登録する
	// (POST /registered-courses)
	PostRegisteredCourses(ctx echo.Context) error
	// 指定した登録された講義を削除する
	// (DELETE /registered-courses/{id})
	DeleteRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error
	// 指定した登録された講義を取得する
	// (GET /registered-courses/{id})
	GetRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error
	// 指定した登録された講義を更新する
	// (PUT /registered-courses/{id})
	PutRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error
	// 学年暦のイベントを取得する
	// (GET /school-calendar/events)
	GetSchoolCalendarEvents(ctx echo.Context, params GetSchoolCalendarEventsParams) error
	// 学年暦のモジュール期間を取得する
	// (GET /school-calendar/modules)
	GetSchoolCalendarModules(ctx echo.Context, params GetSchoolCalendarModulesParams) error
	// 全てのタグを取得する
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// タグを並べ替える
	// (PATCH /tags)
	PatchTags(ctx echo.Context) error
	// タグを作成する
	// (POST /tags)
	PostTags(ctx echo.Context) error
	// タグを削除する
	// (DELETE /tags/{id})
	DeleteTagsId(ctx echo.Context, id openapi_types.UUID) error
	// タグを更新する
	// (PUT /tags/{id})
	PutTagsId(ctx echo.Context, id openapi_types.UUID) error
	// 指定された日付の日程＆時間割情報を取得する
	// (GET /timetable/{date})
	GetTimetableDate(ctx echo.Context, date openapi_types.Date) error
	// ログイン中のユーザーを退会する
	// (DELETE /users/me)
	DeleteUsersMe(ctx echo.Context) error
	// ログイン中のユーザーを取得する
	// (GET /users/me)
	GetUsersMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCourses converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourses(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Required query parameter "codes" -------------

	err = runtime.BindQueryParameter("form", true, true, "codes", ctx.QueryParams(), &params.Codes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter codes: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCourses(ctx, params)
	return err
}

// PostCoursesSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoursesSearch(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCoursesSearch(ctx)
	return err
}

// GetCoursesYearCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoursesYearCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameterWithOptions("simple", "code", ctx.Param("code"), &code, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCoursesYearCode(ctx, year, code)
	return err
}

// GetDonationAggregateTotalAmount converts echo context to params.
func (w *ServerInterfaceWrapper) GetDonationAggregateTotalAmount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDonationAggregateTotalAmount(ctx)
	return err
}

// GetDonationAggregateUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetDonationAggregateUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDonationAggregateUsers(ctx)
	return err
}

// GetDonationPayment converts echo context to params.
func (w *ServerInterfaceWrapper) GetDonationPayment(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDonationPayment(ctx)
	return err
}

// PostDonationSessionOnetime converts echo context to params.
func (w *ServerInterfaceWrapper) PostDonationSessionOnetime(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDonationSessionOnetime(ctx)
	return err
}

// PostDonationSessionSubscription converts echo context to params.
func (w *ServerInterfaceWrapper) PostDonationSessionSubscription(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDonationSessionSubscription(ctx)
	return err
}

// GetDonationSubscriptions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDonationSubscriptions(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDonationSubscriptions(ctx)
	return err
}

// DeleteDonationSubscriptionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDonationSubscriptionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDonationSubscriptionsId(ctx, id)
	return err
}

// GetDonationUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetDonationUsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDonationUsersMe(ctx)
	return err
}

// PatchDonationUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) PatchDonationUsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchDonationUsersMe(ctx)
	return err
}

// GetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetInformation(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInformationParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInformation(ctx, params)
	return err
}

// PutInformationId converts echo context to params.
func (w *ServerInterfaceWrapper) PutInformationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInformationId(ctx, id)
	return err
}

// GetRegisteredCourses converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegisteredCourses(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegisteredCoursesParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegisteredCourses(ctx, params)
	return err
}

// PostRegisteredCourses converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegisteredCourses(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegisteredCourses(ctx)
	return err
}

// DeleteRegisteredCoursesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegisteredCoursesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegisteredCoursesId(ctx, id)
	return err
}

// GetRegisteredCoursesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegisteredCoursesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegisteredCoursesId(ctx, id)
	return err
}

// PutRegisteredCoursesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegisteredCoursesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegisteredCoursesId(ctx, id)
	return err
}

// GetSchoolCalendarEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchoolCalendarEvents(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchoolCalendarEventsParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchoolCalendarEvents(ctx, params)
	return err
}

// GetSchoolCalendarModules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchoolCalendarModules(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchoolCalendarModulesParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchoolCalendarModules(ctx, params)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PatchTags converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTags(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// DeleteTagsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagsId(ctx, id)
	return err
}

// PutTagsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTagsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTagsId(ctx, id)
	return err
}

// GetTimetableDate converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimetableDate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "date" -------------
	var date openapi_types.Date

	err = runtime.BindStyledParameterWithOptions("simple", "date", ctx.Param("date"), &date, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter date: %s", err))
	}

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimetableDate(ctx, date)
	return err
}

// DeleteUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersMe(ctx)
	return err
}

// GetUsersMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersMe(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/courses", wrapper.GetCourses)
	router.POST(baseURL+"/courses/search", wrapper.PostCoursesSearch)
	router.GET(baseURL+"/courses/:year/:code", wrapper.GetCoursesYearCode)
	router.GET(baseURL+"/donation/aggregate/totalAmount", wrapper.GetDonationAggregateTotalAmount)
	router.GET(baseURL+"/donation/aggregate/users", wrapper.GetDonationAggregateUsers)
	router.GET(baseURL+"/donation/payment", wrapper.GetDonationPayment)
	router.POST(baseURL+"/donation/session/onetime", wrapper.PostDonationSessionOnetime)
	router.POST(baseURL+"/donation/session/subscription", wrapper.PostDonationSessionSubscription)
	router.GET(baseURL+"/donation/subscriptions", wrapper.GetDonationSubscriptions)
	router.DELETE(baseURL+"/donation/subscriptions/:id", wrapper.DeleteDonationSubscriptionsId)
	router.GET(baseURL+"/donation/users/me", wrapper.GetDonationUsersMe)
	router.PATCH(baseURL+"/donation/users/me", wrapper.PatchDonationUsersMe)
	router.GET(baseURL+"/information", wrapper.GetInformation)
	router.PUT(baseURL+"/information/:id", wrapper.PutInformationId)
	router.GET(baseURL+"/registered-courses", wrapper.GetRegisteredCourses)
	router.POST(baseURL+"/registered-courses", wrapper.PostRegisteredCourses)
	router.DELETE(baseURL+"/registered-courses/:id", wrapper.DeleteRegisteredCoursesId)
	router.GET(baseURL+"/registered-courses/:id", wrapper.GetRegisteredCoursesId)
	router.PUT(baseURL+"/registered-courses/:id", wrapper.PutRegisteredCoursesId)
	router.GET(baseURL+"/school-calendar/events", wrapper.GetSchoolCalendarEvents)
	router.GET(baseURL+"/school-calendar/modules", wrapper.GetSchoolCalendarModules)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.PATCH(baseURL+"/tags", wrapper.PatchTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.DELETE(baseURL+"/tags/:id", wrapper.DeleteTagsId)
	router.PUT(baseURL+"/tags/:id", wrapper.PutTagsId)
	router.GET(baseURL+"/timetable/:date", wrapper.GetTimetableDate)
	router.DELETE(baseURL+"/users/me", wrapper.DeleteUsersMe)
	router.GET(baseURL+"/users/me", wrapper.GetUsersMe)

}

type BadRequestErrorJSONResponse Error

type InternalServerErrorJSONResponse Error

type NotFoundErrorJSONResponse Error

type UnauthorizedErrorJSONResponse Error

type GetCoursesRequestObject struct {
	Params GetCoursesParams
}

type GetCoursesResponseObject interface {
	VisitGetCoursesResponse(w http.ResponseWriter) error
}

type GetCourses200JSONResponse []Course

func (response GetCourses200JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCourses400JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetCourses401JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetCourses404JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCourses500JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCoursesSearchRequestObject struct {
	Body *PostCoursesSearchJSONRequestBody
}

type PostCoursesSearchResponseObject interface {
	VisitPostCoursesSearchResponse(w http.ResponseWriter) error
}

type PostCoursesSearch200JSONResponse []Course

func (response PostCoursesSearch200JSONResponse) VisitPostCoursesSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostCoursesSearch400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PostCoursesSearch400JSONResponse) VisitPostCoursesSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCoursesSearch401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PostCoursesSearch401JSONResponse) VisitPostCoursesSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCoursesSearch500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostCoursesSearch500JSONResponse) VisitPostCoursesSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesYearCodeRequestObject struct {
	Year int    `json:"year"`
	Code string `json:"code"`
}

type GetCoursesYearCodeResponseObject interface {
	VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error
}

type GetCoursesYearCode200JSONResponse Course

func (response GetCoursesYearCode200JSONResponse) VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesYearCode400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetCoursesYearCode400JSONResponse) VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesYearCode401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetCoursesYearCode401JSONResponse) VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesYearCode404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetCoursesYearCode404JSONResponse) VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesYearCode500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetCoursesYearCode500JSONResponse) VisitGetCoursesYearCodeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateTotalAmountRequestObject struct {
}

type GetDonationAggregateTotalAmountResponseObject interface {
	VisitGetDonationAggregateTotalAmountResponse(w http.ResponseWriter) error
}

type GetDonationAggregateTotalAmount200JSONResponse struct {
	Total int `json:"total"`
}

func (response GetDonationAggregateTotalAmount200JSONResponse) VisitGetDonationAggregateTotalAmountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateTotalAmount400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetDonationAggregateTotalAmount400JSONResponse) VisitGetDonationAggregateTotalAmountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateTotalAmount500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetDonationAggregateTotalAmount500JSONResponse) VisitGetDonationAggregateTotalAmountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateUsersRequestObject struct {
}

type GetDonationAggregateUsersResponseObject interface {
	VisitGetDonationAggregateUsersResponse(w http.ResponseWriter) error
}

type GetDonationAggregateUsers200JSONResponse []struct {
	DisplayName *string `json:"displayName,omitempty"`
	Link        *string `json:"link,omitempty"`
}

func (response GetDonationAggregateUsers200JSONResponse) VisitGetDonationAggregateUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateUsers400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetDonationAggregateUsers400JSONResponse) VisitGetDonationAggregateUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateUsers401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetDonationAggregateUsers401JSONResponse) VisitGetDonationAggregateUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationAggregateUsers500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetDonationAggregateUsers500JSONResponse) VisitGetDonationAggregateUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationPaymentRequestObject struct {
}

type GetDonationPaymentResponseObject interface {
	VisitGetDonationPaymentResponse(w http.ResponseWriter) error
}

type GetDonationPayment200JSONResponse []Payment

func (response GetDonationPayment200JSONResponse) VisitGetDonationPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationPayment400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetDonationPayment400JSONResponse) VisitGetDonationPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationPayment401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetDonationPayment401JSONResponse) VisitGetDonationPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationPayment500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetDonationPayment500JSONResponse) VisitGetDonationPaymentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionOnetimeRequestObject struct {
	Body *PostDonationSessionOnetimeJSONRequestBody
}

type PostDonationSessionOnetimeResponseObject interface {
	VisitPostDonationSessionOnetimeResponse(w http.ResponseWriter) error
}

type PostDonationSessionOnetime200JSONResponse struct {
	SessionId string `json:"sessionId"`
}

func (response PostDonationSessionOnetime200JSONResponse) VisitPostDonationSessionOnetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionOnetime400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PostDonationSessionOnetime400JSONResponse) VisitPostDonationSessionOnetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionOnetime500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostDonationSessionOnetime500JSONResponse) VisitPostDonationSessionOnetimeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionSubscriptionRequestObject struct {
	Body *PostDonationSessionSubscriptionJSONRequestBody
}

type PostDonationSessionSubscriptionResponseObject interface {
	VisitPostDonationSessionSubscriptionResponse(w http.ResponseWriter) error
}

type PostDonationSessionSubscription200JSONResponse struct {
	SessionId string `json:"sessionId"`
}

func (response PostDonationSessionSubscription200JSONResponse) VisitPostDonationSessionSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionSubscription400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PostDonationSessionSubscription400JSONResponse) VisitPostDonationSessionSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionSubscription401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PostDonationSessionSubscription401JSONResponse) VisitPostDonationSessionSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostDonationSessionSubscription500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostDonationSessionSubscription500JSONResponse) VisitPostDonationSessionSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationSubscriptionsRequestObject struct {
}

type GetDonationSubscriptionsResponseObject interface {
	VisitGetDonationSubscriptionsResponse(w http.ResponseWriter) error
}

type GetDonationSubscriptions200JSONResponse []Subscription

func (response GetDonationSubscriptions200JSONResponse) VisitGetDonationSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationSubscriptions400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetDonationSubscriptions400JSONResponse) VisitGetDonationSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationSubscriptions401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetDonationSubscriptions401JSONResponse) VisitGetDonationSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationSubscriptions500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetDonationSubscriptions500JSONResponse) VisitGetDonationSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDonationSubscriptionsIdRequestObject struct {
	Id string `json:"id"`
}

type DeleteDonationSubscriptionsIdResponseObject interface {
	VisitDeleteDonationSubscriptionsIdResponse(w http.ResponseWriter) error
}

type DeleteDonationSubscriptionsId200Response struct {
}

func (response DeleteDonationSubscriptionsId200Response) VisitDeleteDonationSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteDonationSubscriptionsId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteDonationSubscriptionsId400JSONResponse) VisitDeleteDonationSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDonationSubscriptionsId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteDonationSubscriptionsId401JSONResponse) VisitDeleteDonationSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDonationSubscriptionsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteDonationSubscriptionsId500JSONResponse) VisitDeleteDonationSubscriptionsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationUsersMeRequestObject struct {
}

type GetDonationUsersMeResponseObject interface {
	VisitGetDonationUsersMeResponse(w http.ResponseWriter) error
}

type GetDonationUsersMe200JSONResponse PaymentUser

func (response GetDonationUsersMe200JSONResponse) VisitGetDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationUsersMe400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetDonationUsersMe400JSONResponse) VisitGetDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationUsersMe401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetDonationUsersMe401JSONResponse) VisitGetDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDonationUsersMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetDonationUsersMe500JSONResponse) VisitGetDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchDonationUsersMeRequestObject struct {
	Body *PatchDonationUsersMeJSONRequestBody
}

type PatchDonationUsersMeResponseObject interface {
	VisitPatchDonationUsersMeResponse(w http.ResponseWriter) error
}

type PatchDonationUsersMe200JSONResponse PaymentUser

func (response PatchDonationUsersMe200JSONResponse) VisitPatchDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchDonationUsersMe400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PatchDonationUsersMe400JSONResponse) VisitPatchDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchDonationUsersMe401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PatchDonationUsersMe401JSONResponse) VisitPatchDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchDonationUsersMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PatchDonationUsersMe500JSONResponse) VisitPatchDonationUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetInformationRequestObject struct {
	Params GetInformationParams
}

type GetInformationResponseObject interface {
	VisitGetInformationResponse(w http.ResponseWriter) error
}

type GetInformation200JSONResponse []Information

func (response GetInformation200JSONResponse) VisitGetInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInformation400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetInformation400JSONResponse) VisitGetInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetInformation500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetInformation500JSONResponse) VisitGetInformationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutInformationIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutInformationIdJSONRequestBody
}

type PutInformationIdResponseObject interface {
	VisitPutInformationIdResponse(w http.ResponseWriter) error
}

type PutInformationId200Response struct {
}

func (response PutInformationId200Response) VisitPutInformationIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutInformationId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PutInformationId400JSONResponse) VisitPutInformationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutInformationId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PutInformationId500JSONResponse) VisitPutInformationIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesRequestObject struct {
	Params GetRegisteredCoursesParams
}

type GetRegisteredCoursesResponseObject interface {
	VisitGetRegisteredCoursesResponse(w http.ResponseWriter) error
}

type GetRegisteredCourses200JSONResponse []RegisteredCourse

func (response GetRegisteredCourses200JSONResponse) VisitGetRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCourses400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetRegisteredCourses400JSONResponse) VisitGetRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCourses401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetRegisteredCourses401JSONResponse) VisitGetRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCourses500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetRegisteredCourses500JSONResponse) VisitGetRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisteredCoursesRequestObject struct {
	Body *PostRegisteredCoursesJSONRequestBody
}

type PostRegisteredCoursesResponseObject interface {
	VisitPostRegisteredCoursesResponse(w http.ResponseWriter) error
}

type PostRegisteredCourses200JSONResponse struct {
	union json.RawMessage
}

func (response PostRegisteredCourses200JSONResponse) VisitPostRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.union)
}

type PostRegisteredCourses400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PostRegisteredCourses400JSONResponse) VisitPostRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisteredCourses401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PostRegisteredCourses401JSONResponse) VisitPostRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRegisteredCourses500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostRegisteredCourses500JSONResponse) VisitPostRegisteredCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRegisteredCoursesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteRegisteredCoursesIdResponseObject interface {
	VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error
}

type DeleteRegisteredCoursesId204Response struct {
}

func (response DeleteRegisteredCoursesId204Response) VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRegisteredCoursesId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteRegisteredCoursesId400JSONResponse) VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRegisteredCoursesId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteRegisteredCoursesId401JSONResponse) VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRegisteredCoursesId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteRegisteredCoursesId404JSONResponse) VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRegisteredCoursesId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteRegisteredCoursesId500JSONResponse) VisitDeleteRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetRegisteredCoursesIdResponseObject interface {
	VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error
}

type GetRegisteredCoursesId200JSONResponse RegisteredCourse

func (response GetRegisteredCoursesId200JSONResponse) VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetRegisteredCoursesId400JSONResponse) VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetRegisteredCoursesId401JSONResponse) VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetRegisteredCoursesId404JSONResponse) VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRegisteredCoursesId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetRegisteredCoursesId500JSONResponse) VisitGetRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutRegisteredCoursesIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutRegisteredCoursesIdJSONRequestBody
}

type PutRegisteredCoursesIdResponseObject interface {
	VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error
}

type PutRegisteredCoursesId200JSONResponse RegisteredCourse

func (response PutRegisteredCoursesId200JSONResponse) VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutRegisteredCoursesId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PutRegisteredCoursesId400JSONResponse) VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutRegisteredCoursesId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PutRegisteredCoursesId401JSONResponse) VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutRegisteredCoursesId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PutRegisteredCoursesId404JSONResponse) VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutRegisteredCoursesId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PutRegisteredCoursesId500JSONResponse) VisitPutRegisteredCoursesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarEventsRequestObject struct {
	Params GetSchoolCalendarEventsParams
}

type GetSchoolCalendarEventsResponseObject interface {
	VisitGetSchoolCalendarEventsResponse(w http.ResponseWriter) error
}

type GetSchoolCalendarEvents200JSONResponse []SchoolCalendarEvent

func (response GetSchoolCalendarEvents200JSONResponse) VisitGetSchoolCalendarEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarEvents400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetSchoolCalendarEvents400JSONResponse) VisitGetSchoolCalendarEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarEvents401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetSchoolCalendarEvents401JSONResponse) VisitGetSchoolCalendarEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarEvents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetSchoolCalendarEvents500JSONResponse) VisitGetSchoolCalendarEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarModulesRequestObject struct {
	Params GetSchoolCalendarModulesParams
}

type GetSchoolCalendarModulesResponseObject interface {
	VisitGetSchoolCalendarModulesResponse(w http.ResponseWriter) error
}

type GetSchoolCalendarModules200JSONResponse []SchoolCalendarModule

func (response GetSchoolCalendarModules200JSONResponse) VisitGetSchoolCalendarModulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarModules400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetSchoolCalendarModules400JSONResponse) VisitGetSchoolCalendarModulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarModules401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetSchoolCalendarModules401JSONResponse) VisitGetSchoolCalendarModulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSchoolCalendarModules500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetSchoolCalendarModules500JSONResponse) VisitGetSchoolCalendarModulesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTagsRequestObject struct {
}

type GetTagsResponseObject interface {
	VisitGetTagsResponse(w http.ResponseWriter) error
}

type GetTags200JSONResponse []Tag

func (response GetTags200JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTags401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetTags401JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTags500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetTags500JSONResponse) VisitGetTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTagsRequestObject struct {
	Body *PatchTagsJSONRequestBody
}

type PatchTagsResponseObject interface {
	VisitPatchTagsResponse(w http.ResponseWriter) error
}

type PatchTags200JSONResponse []TagPositionOnly

func (response PatchTags200JSONResponse) VisitPatchTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTags400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PatchTags400JSONResponse) VisitPatchTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchTags401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PatchTags401JSONResponse) VisitPatchTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTags500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PatchTags500JSONResponse) VisitPatchTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostTagsRequestObject struct {
	Body *PostTagsJSONRequestBody
}

type PostTagsResponseObject interface {
	VisitPostTagsResponse(w http.ResponseWriter) error
}

type PostTags200JSONResponse Tag

func (response PostTags200JSONResponse) VisitPostTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostTags400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PostTags400JSONResponse) VisitPostTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostTags401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PostTags401JSONResponse) VisitPostTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTags500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PostTags500JSONResponse) VisitPostTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteTagsIdResponseObject interface {
	VisitDeleteTagsIdResponse(w http.ResponseWriter) error
}

type DeleteTagsId204Response struct {
}

func (response DeleteTagsId204Response) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTagsId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response DeleteTagsId400JSONResponse) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagsId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteTagsId401JSONResponse) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagsId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteTagsId404JSONResponse) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTagsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteTagsId500JSONResponse) VisitDeleteTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PutTagsIdJSONRequestBody
}

type PutTagsIdResponseObject interface {
	VisitPutTagsIdResponse(w http.ResponseWriter) error
}

type PutTagsId200JSONResponse Tag

func (response PutTagsId200JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsId400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response PutTagsId400JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsId401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response PutTagsId401JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsId404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PutTagsId404JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTagsId500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response PutTagsId500JSONResponse) VisitPutTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTimetableDateRequestObject struct {
	Date openapi_types.Date `json:"date"`
}

type GetTimetableDateResponseObject interface {
	VisitGetTimetableDateResponse(w http.ResponseWriter) error
}

type GetTimetableDate200JSONResponse struct {
	Courses []RegisteredCourse    `json:"courses"`
	Date    openapi_types.Date    `json:"date"`
	Events  []SchoolCalendarEvent `json:"events"`
	Module  *SchoolCalendarModule `json:"module,omitempty"`
}

func (response GetTimetableDate200JSONResponse) VisitGetTimetableDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTimetableDate400JSONResponse struct{ BadRequestErrorJSONResponse }

func (response GetTimetableDate400JSONResponse) VisitGetTimetableDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetTimetableDate401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetTimetableDate401JSONResponse) VisitGetTimetableDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTimetableDate500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetTimetableDate500JSONResponse) VisitGetTimetableDateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersMeRequestObject struct {
}

type DeleteUsersMeResponseObject interface {
	VisitDeleteUsersMeResponse(w http.ResponseWriter) error
}

type DeleteUsersMe204Response struct {
}

func (response DeleteUsersMe204Response) VisitDeleteUsersMeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersMe401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response DeleteUsersMe401JSONResponse) VisitDeleteUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response DeleteUsersMe500JSONResponse) VisitDeleteUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMeRequestObject struct {
}

type GetUsersMeResponseObject interface {
	VisitGetUsersMeResponse(w http.ResponseWriter) error
}

type GetUsersMe200JSONResponse User

func (response GetUsersMe200JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe401JSONResponse struct{ UnauthorizedErrorJSONResponse }

func (response GetUsersMe401JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersMe500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetUsersMe500JSONResponse) VisitGetUsersMeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// 指定した複数の講義を取得する
	// (GET /courses)
	GetCourses(ctx context.Context, request GetCoursesRequestObject) (GetCoursesResponseObject, error)
	// 講義を検索する
	// (POST /courses/search)
	PostCoursesSearch(ctx context.Context, request PostCoursesSearchRequestObject) (PostCoursesSearchResponseObject, error)
	// 指定した講義を取得する
	// (GET /courses/{year}/{code})
	GetCoursesYearCode(ctx context.Context, request GetCoursesYearCodeRequestObject) (GetCoursesYearCodeResponseObject, error)
	// 寄付総額を取得
	// (GET /donation/aggregate/totalAmount)
	GetDonationAggregateTotalAmount(ctx context.Context, request GetDonationAggregateTotalAmountRequestObject) (GetDonationAggregateTotalAmountResponseObject, error)
	// 寄付してくれたユーザーで掲載OKのユーザー一覧を取得
	// (GET /donation/aggregate/users)
	GetDonationAggregateUsers(ctx context.Context, request GetDonationAggregateUsersRequestObject) (GetDonationAggregateUsersResponseObject, error)
	// 請求一覧を取得
	// (GET /donation/payment)
	GetDonationPayment(ctx context.Context, request GetDonationPaymentRequestObject) (GetDonationPaymentResponseObject, error)
	// 単発寄付のセッションを作成
	// (POST /donation/session/onetime)
	PostDonationSessionOnetime(ctx context.Context, request PostDonationSessionOnetimeRequestObject) (PostDonationSessionOnetimeResponseObject, error)
	// サブスク寄付のセッションを作成
	// (POST /donation/session/subscription)
	PostDonationSessionSubscription(ctx context.Context, request PostDonationSessionSubscriptionRequestObject) (PostDonationSessionSubscriptionResponseObject, error)
	// 契約中のサブスクを取得する
	// (GET /donation/subscriptions)
	GetDonationSubscriptions(ctx context.Context, request GetDonationSubscriptionsRequestObject) (GetDonationSubscriptionsResponseObject, error)
	// 指定したサブスクを解除
	// (DELETE /donation/subscriptions/{id})
	DeleteDonationSubscriptionsId(ctx context.Context, request DeleteDonationSubscriptionsIdRequestObject) (DeleteDonationSubscriptionsIdResponseObject, error)
	// 支払いユーザー取得
	// (GET /donation/users/me)
	GetDonationUsersMe(ctx context.Context, request GetDonationUsersMeRequestObject) (GetDonationUsersMeResponseObject, error)
	// 支払いユーザー情報更新
	// (PATCH /donation/users/me)
	PatchDonationUsersMe(ctx context.Context, request PatchDonationUsersMeRequestObject) (PatchDonationUsersMeResponseObject, error)
	// お知らせを取得
	// (GET /information)
	GetInformation(ctx context.Context, request GetInformationRequestObject) (GetInformationResponseObject, error)
	// お知らせの既読
	// (PUT /information/{id})
	PutInformationId(ctx context.Context, request PutInformationIdRequestObject) (PutInformationIdResponseObject, error)
	// 登録済みの講義を返す
	// (GET /registered-courses)
	GetRegisteredCourses(ctx context.Context, request GetRegisteredCoursesRequestObject) (GetRegisteredCoursesResponseObject, error)
	// 講義を登録する
	// (POST /registered-courses)
	PostRegisteredCourses(ctx context.Context, request PostRegisteredCoursesRequestObject) (PostRegisteredCoursesResponseObject, error)
	// 指定した登録された講義を削除する
	// (DELETE /registered-courses/{id})
	DeleteRegisteredCoursesId(ctx context.Context, request DeleteRegisteredCoursesIdRequestObject) (DeleteRegisteredCoursesIdResponseObject, error)
	// 指定した登録された講義を取得する
	// (GET /registered-courses/{id})
	GetRegisteredCoursesId(ctx context.Context, request GetRegisteredCoursesIdRequestObject) (GetRegisteredCoursesIdResponseObject, error)
	// 指定した登録された講義を更新する
	// (PUT /registered-courses/{id})
	PutRegisteredCoursesId(ctx context.Context, request PutRegisteredCoursesIdRequestObject) (PutRegisteredCoursesIdResponseObject, error)
	// 学年暦のイベントを取得する
	// (GET /school-calendar/events)
	GetSchoolCalendarEvents(ctx context.Context, request GetSchoolCalendarEventsRequestObject) (GetSchoolCalendarEventsResponseObject, error)
	// 学年暦のモジュール期間を取得する
	// (GET /school-calendar/modules)
	GetSchoolCalendarModules(ctx context.Context, request GetSchoolCalendarModulesRequestObject) (GetSchoolCalendarModulesResponseObject, error)
	// 全てのタグを取得する
	// (GET /tags)
	GetTags(ctx context.Context, request GetTagsRequestObject) (GetTagsResponseObject, error)
	// タグを並べ替える
	// (PATCH /tags)
	PatchTags(ctx context.Context, request PatchTagsRequestObject) (PatchTagsResponseObject, error)
	// タグを作成する
	// (POST /tags)
	PostTags(ctx context.Context, request PostTagsRequestObject) (PostTagsResponseObject, error)
	// タグを削除する
	// (DELETE /tags/{id})
	DeleteTagsId(ctx context.Context, request DeleteTagsIdRequestObject) (DeleteTagsIdResponseObject, error)
	// タグを更新する
	// (PUT /tags/{id})
	PutTagsId(ctx context.Context, request PutTagsIdRequestObject) (PutTagsIdResponseObject, error)
	// 指定された日付の日程＆時間割情報を取得する
	// (GET /timetable/{date})
	GetTimetableDate(ctx context.Context, request GetTimetableDateRequestObject) (GetTimetableDateResponseObject, error)
	// ログイン中のユーザーを退会する
	// (DELETE /users/me)
	DeleteUsersMe(ctx context.Context, request DeleteUsersMeRequestObject) (DeleteUsersMeResponseObject, error)
	// ログイン中のユーザーを取得する
	// (GET /users/me)
	GetUsersMe(ctx context.Context, request GetUsersMeRequestObject) (GetUsersMeResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCourses operation middleware
func (sh *strictHandler) GetCourses(ctx echo.Context, params GetCoursesParams) error {
	var request GetCoursesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCourses(ctx.Request().Context(), request.(GetCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCoursesResponseObject); ok {
		return validResponse.VisitGetCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCoursesSearch operation middleware
func (sh *strictHandler) PostCoursesSearch(ctx echo.Context) error {
	var request PostCoursesSearchRequestObject

	var body PostCoursesSearchJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCoursesSearch(ctx.Request().Context(), request.(PostCoursesSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCoursesSearch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCoursesSearchResponseObject); ok {
		return validResponse.VisitPostCoursesSearchResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCoursesYearCode operation middleware
func (sh *strictHandler) GetCoursesYearCode(ctx echo.Context, year int, code string) error {
	var request GetCoursesYearCodeRequestObject

	request.Year = year
	request.Code = code

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCoursesYearCode(ctx.Request().Context(), request.(GetCoursesYearCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCoursesYearCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCoursesYearCodeResponseObject); ok {
		return validResponse.VisitGetCoursesYearCodeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDonationAggregateTotalAmount operation middleware
func (sh *strictHandler) GetDonationAggregateTotalAmount(ctx echo.Context) error {
	var request GetDonationAggregateTotalAmountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDonationAggregateTotalAmount(ctx.Request().Context(), request.(GetDonationAggregateTotalAmountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDonationAggregateTotalAmount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDonationAggregateTotalAmountResponseObject); ok {
		return validResponse.VisitGetDonationAggregateTotalAmountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDonationAggregateUsers operation middleware
func (sh *strictHandler) GetDonationAggregateUsers(ctx echo.Context) error {
	var request GetDonationAggregateUsersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDonationAggregateUsers(ctx.Request().Context(), request.(GetDonationAggregateUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDonationAggregateUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDonationAggregateUsersResponseObject); ok {
		return validResponse.VisitGetDonationAggregateUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDonationPayment operation middleware
func (sh *strictHandler) GetDonationPayment(ctx echo.Context) error {
	var request GetDonationPaymentRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDonationPayment(ctx.Request().Context(), request.(GetDonationPaymentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDonationPayment")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDonationPaymentResponseObject); ok {
		return validResponse.VisitGetDonationPaymentResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostDonationSessionOnetime operation middleware
func (sh *strictHandler) PostDonationSessionOnetime(ctx echo.Context) error {
	var request PostDonationSessionOnetimeRequestObject

	var body PostDonationSessionOnetimeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDonationSessionOnetime(ctx.Request().Context(), request.(PostDonationSessionOnetimeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDonationSessionOnetime")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostDonationSessionOnetimeResponseObject); ok {
		return validResponse.VisitPostDonationSessionOnetimeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostDonationSessionSubscription operation middleware
func (sh *strictHandler) PostDonationSessionSubscription(ctx echo.Context) error {
	var request PostDonationSessionSubscriptionRequestObject

	var body PostDonationSessionSubscriptionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostDonationSessionSubscription(ctx.Request().Context(), request.(PostDonationSessionSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDonationSessionSubscription")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostDonationSessionSubscriptionResponseObject); ok {
		return validResponse.VisitPostDonationSessionSubscriptionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDonationSubscriptions operation middleware
func (sh *strictHandler) GetDonationSubscriptions(ctx echo.Context) error {
	var request GetDonationSubscriptionsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDonationSubscriptions(ctx.Request().Context(), request.(GetDonationSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDonationSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDonationSubscriptionsResponseObject); ok {
		return validResponse.VisitGetDonationSubscriptionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteDonationSubscriptionsId operation middleware
func (sh *strictHandler) DeleteDonationSubscriptionsId(ctx echo.Context, id string) error {
	var request DeleteDonationSubscriptionsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDonationSubscriptionsId(ctx.Request().Context(), request.(DeleteDonationSubscriptionsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDonationSubscriptionsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteDonationSubscriptionsIdResponseObject); ok {
		return validResponse.VisitDeleteDonationSubscriptionsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDonationUsersMe operation middleware
func (sh *strictHandler) GetDonationUsersMe(ctx echo.Context) error {
	var request GetDonationUsersMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDonationUsersMe(ctx.Request().Context(), request.(GetDonationUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDonationUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDonationUsersMeResponseObject); ok {
		return validResponse.VisitGetDonationUsersMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchDonationUsersMe operation middleware
func (sh *strictHandler) PatchDonationUsersMe(ctx echo.Context) error {
	var request PatchDonationUsersMeRequestObject

	var body PatchDonationUsersMeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDonationUsersMe(ctx.Request().Context(), request.(PatchDonationUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDonationUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchDonationUsersMeResponseObject); ok {
		return validResponse.VisitPatchDonationUsersMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetInformation operation middleware
func (sh *strictHandler) GetInformation(ctx echo.Context, params GetInformationParams) error {
	var request GetInformationRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInformation(ctx.Request().Context(), request.(GetInformationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInformation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInformationResponseObject); ok {
		return validResponse.VisitGetInformationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutInformationId operation middleware
func (sh *strictHandler) PutInformationId(ctx echo.Context, id openapi_types.UUID) error {
	var request PutInformationIdRequestObject

	request.Id = id

	var body PutInformationIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutInformationId(ctx.Request().Context(), request.(PutInformationIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutInformationId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutInformationIdResponseObject); ok {
		return validResponse.VisitPutInformationIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRegisteredCourses operation middleware
func (sh *strictHandler) GetRegisteredCourses(ctx echo.Context, params GetRegisteredCoursesParams) error {
	var request GetRegisteredCoursesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRegisteredCourses(ctx.Request().Context(), request.(GetRegisteredCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRegisteredCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRegisteredCoursesResponseObject); ok {
		return validResponse.VisitGetRegisteredCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRegisteredCourses operation middleware
func (sh *strictHandler) PostRegisteredCourses(ctx echo.Context) error {
	var request PostRegisteredCoursesRequestObject

	var body PostRegisteredCoursesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRegisteredCourses(ctx.Request().Context(), request.(PostRegisteredCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRegisteredCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRegisteredCoursesResponseObject); ok {
		return validResponse.VisitPostRegisteredCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRegisteredCoursesId operation middleware
func (sh *strictHandler) DeleteRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteRegisteredCoursesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRegisteredCoursesId(ctx.Request().Context(), request.(DeleteRegisteredCoursesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRegisteredCoursesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRegisteredCoursesIdResponseObject); ok {
		return validResponse.VisitDeleteRegisteredCoursesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRegisteredCoursesId operation middleware
func (sh *strictHandler) GetRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error {
	var request GetRegisteredCoursesIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRegisteredCoursesId(ctx.Request().Context(), request.(GetRegisteredCoursesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRegisteredCoursesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRegisteredCoursesIdResponseObject); ok {
		return validResponse.VisitGetRegisteredCoursesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutRegisteredCoursesId operation middleware
func (sh *strictHandler) PutRegisteredCoursesId(ctx echo.Context, id openapi_types.UUID) error {
	var request PutRegisteredCoursesIdRequestObject

	request.Id = id

	var body PutRegisteredCoursesIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutRegisteredCoursesId(ctx.Request().Context(), request.(PutRegisteredCoursesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutRegisteredCoursesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutRegisteredCoursesIdResponseObject); ok {
		return validResponse.VisitPutRegisteredCoursesIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSchoolCalendarEvents operation middleware
func (sh *strictHandler) GetSchoolCalendarEvents(ctx echo.Context, params GetSchoolCalendarEventsParams) error {
	var request GetSchoolCalendarEventsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchoolCalendarEvents(ctx.Request().Context(), request.(GetSchoolCalendarEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchoolCalendarEvents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSchoolCalendarEventsResponseObject); ok {
		return validResponse.VisitGetSchoolCalendarEventsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSchoolCalendarModules operation middleware
func (sh *strictHandler) GetSchoolCalendarModules(ctx echo.Context, params GetSchoolCalendarModulesParams) error {
	var request GetSchoolCalendarModulesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSchoolCalendarModules(ctx.Request().Context(), request.(GetSchoolCalendarModulesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSchoolCalendarModules")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSchoolCalendarModulesResponseObject); ok {
		return validResponse.VisitGetSchoolCalendarModulesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTags operation middleware
func (sh *strictHandler) GetTags(ctx echo.Context) error {
	var request GetTagsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTags(ctx.Request().Context(), request.(GetTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTagsResponseObject); ok {
		return validResponse.VisitGetTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTags operation middleware
func (sh *strictHandler) PatchTags(ctx echo.Context) error {
	var request PatchTagsRequestObject

	var body PatchTagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTags(ctx.Request().Context(), request.(PatchTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTagsResponseObject); ok {
		return validResponse.VisitPatchTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTags operation middleware
func (sh *strictHandler) PostTags(ctx echo.Context) error {
	var request PostTagsRequestObject

	var body PostTagsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTags(ctx.Request().Context(), request.(PostTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTagsResponseObject); ok {
		return validResponse.VisitPostTagsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTagsId operation middleware
func (sh *strictHandler) DeleteTagsId(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteTagsIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTagsId(ctx.Request().Context(), request.(DeleteTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTagsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTagsIdResponseObject); ok {
		return validResponse.VisitDeleteTagsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTagsId operation middleware
func (sh *strictHandler) PutTagsId(ctx echo.Context, id openapi_types.UUID) error {
	var request PutTagsIdRequestObject

	request.Id = id

	var body PutTagsIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTagsId(ctx.Request().Context(), request.(PutTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTagsId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTagsIdResponseObject); ok {
		return validResponse.VisitPutTagsIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTimetableDate operation middleware
func (sh *strictHandler) GetTimetableDate(ctx echo.Context, date openapi_types.Date) error {
	var request GetTimetableDateRequestObject

	request.Date = date

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTimetableDate(ctx.Request().Context(), request.(GetTimetableDateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTimetableDate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTimetableDateResponseObject); ok {
		return validResponse.VisitGetTimetableDateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUsersMe operation middleware
func (sh *strictHandler) DeleteUsersMe(ctx echo.Context) error {
	var request DeleteUsersMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersMe(ctx.Request().Context(), request.(DeleteUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUsersMeResponseObject); ok {
		return validResponse.VisitDeleteUsersMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersMe operation middleware
func (sh *strictHandler) GetUsersMe(ctx echo.Context) error {
	var request GetUsersMeRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersMe(ctx.Request().Context(), request.(GetUsersMeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersMe")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersMeResponseObject); ok {
		return validResponse.VisitGetUsersMeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
