// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                     db,
		AlreadyRead:            newAlreadyRead(db, opts...),
		Course:                 newCourse(db, opts...),
		CourseMethod:           newCourseMethod(db, opts...),
		CourseRecommendedGrade: newCourseRecommendedGrade(db, opts...),
		CourseSchedule:         newCourseSchedule(db, opts...),
		Information:            newInformation(db, opts...),
		PaymentUser:            newPaymentUser(db, opts...),
		RegisteredCourse:       newRegisteredCourse(db, opts...),
		RegisteredCourseTag:    newRegisteredCourseTag(db, opts...),
		SchemaMigration:        newSchemaMigration(db, opts...),
		Session:                newSession(db, opts...),
		Tag:                    newTag(db, opts...),
		User:                   newUser(db, opts...),
		UserAuthentication:     newUserAuthentication(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AlreadyRead            alreadyRead
	Course                 course
	CourseMethod           courseMethod
	CourseRecommendedGrade courseRecommendedGrade
	CourseSchedule         courseSchedule
	Information            information
	PaymentUser            paymentUser
	RegisteredCourse       registeredCourse
	RegisteredCourseTag    registeredCourseTag
	SchemaMigration        schemaMigration
	Session                session
	Tag                    tag
	User                   user
	UserAuthentication     userAuthentication
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AlreadyRead:            q.AlreadyRead.clone(db),
		Course:                 q.Course.clone(db),
		CourseMethod:           q.CourseMethod.clone(db),
		CourseRecommendedGrade: q.CourseRecommendedGrade.clone(db),
		CourseSchedule:         q.CourseSchedule.clone(db),
		Information:            q.Information.clone(db),
		PaymentUser:            q.PaymentUser.clone(db),
		RegisteredCourse:       q.RegisteredCourse.clone(db),
		RegisteredCourseTag:    q.RegisteredCourseTag.clone(db),
		SchemaMigration:        q.SchemaMigration.clone(db),
		Session:                q.Session.clone(db),
		Tag:                    q.Tag.clone(db),
		User:                   q.User.clone(db),
		UserAuthentication:     q.UserAuthentication.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                     db,
		AlreadyRead:            q.AlreadyRead.replaceDB(db),
		Course:                 q.Course.replaceDB(db),
		CourseMethod:           q.CourseMethod.replaceDB(db),
		CourseRecommendedGrade: q.CourseRecommendedGrade.replaceDB(db),
		CourseSchedule:         q.CourseSchedule.replaceDB(db),
		Information:            q.Information.replaceDB(db),
		PaymentUser:            q.PaymentUser.replaceDB(db),
		RegisteredCourse:       q.RegisteredCourse.replaceDB(db),
		RegisteredCourseTag:    q.RegisteredCourseTag.replaceDB(db),
		SchemaMigration:        q.SchemaMigration.replaceDB(db),
		Session:                q.Session.replaceDB(db),
		Tag:                    q.Tag.replaceDB(db),
		User:                   q.User.replaceDB(db),
		UserAuthentication:     q.UserAuthentication.replaceDB(db),
	}
}

type queryCtx struct {
	AlreadyRead            *alreadyReadDo
	Course                 *courseDo
	CourseMethod           *courseMethodDo
	CourseRecommendedGrade *courseRecommendedGradeDo
	CourseSchedule         *courseScheduleDo
	Information            *informationDo
	PaymentUser            *paymentUserDo
	RegisteredCourse       *registeredCourseDo
	RegisteredCourseTag    *registeredCourseTagDo
	SchemaMigration        *schemaMigrationDo
	Session                *sessionDo
	Tag                    *tagDo
	User                   *userDo
	UserAuthentication     *userAuthenticationDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AlreadyRead:            q.AlreadyRead.WithContext(ctx),
		Course:                 q.Course.WithContext(ctx),
		CourseMethod:           q.CourseMethod.WithContext(ctx),
		CourseRecommendedGrade: q.CourseRecommendedGrade.WithContext(ctx),
		CourseSchedule:         q.CourseSchedule.WithContext(ctx),
		Information:            q.Information.WithContext(ctx),
		PaymentUser:            q.PaymentUser.WithContext(ctx),
		RegisteredCourse:       q.RegisteredCourse.WithContext(ctx),
		RegisteredCourseTag:    q.RegisteredCourseTag.WithContext(ctx),
		SchemaMigration:        q.SchemaMigration.WithContext(ctx),
		Session:                q.Session.WithContext(ctx),
		Tag:                    q.Tag.WithContext(ctx),
		User:                   q.User.WithContext(ctx),
		UserAuthentication:     q.UserAuthentication.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
