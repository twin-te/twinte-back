// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newPaymentUser(db *gorm.DB, opts ...gen.DOOption) paymentUser {
	_paymentUser := paymentUser{}

	_paymentUser.paymentUserDo.UseDB(db, opts...)
	_paymentUser.paymentUserDo.UseModel(&model.PaymentUser{})

	tableName := _paymentUser.paymentUserDo.TableName()
	_paymentUser.ALL = field.NewAsterisk(tableName)
	_paymentUser.ID = field.NewString(tableName, "id")
	_paymentUser.TwinteUserID = field.NewString(tableName, "twinte_user_id")
	_paymentUser.DisplayName = field.NewString(tableName, "display_name")
	_paymentUser.Link = field.NewString(tableName, "link")

	_paymentUser.fillFieldMap()

	return _paymentUser
}

type paymentUser struct {
	paymentUserDo paymentUserDo

	ALL          field.Asterisk
	ID           field.String
	TwinteUserID field.String
	DisplayName  field.String
	Link         field.String

	fieldMap map[string]field.Expr
}

func (p paymentUser) Table(newTableName string) *paymentUser {
	p.paymentUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p paymentUser) As(alias string) *paymentUser {
	p.paymentUserDo.DO = *(p.paymentUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *paymentUser) updateTableName(table string) *paymentUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewString(table, "id")
	p.TwinteUserID = field.NewString(table, "twinte_user_id")
	p.DisplayName = field.NewString(table, "display_name")
	p.Link = field.NewString(table, "link")

	p.fillFieldMap()

	return p
}

func (p *paymentUser) WithContext(ctx context.Context) *paymentUserDo {
	return p.paymentUserDo.WithContext(ctx)
}

func (p paymentUser) TableName() string { return p.paymentUserDo.TableName() }

func (p paymentUser) Alias() string { return p.paymentUserDo.Alias() }

func (p paymentUser) Columns(cols ...field.Expr) gen.Columns { return p.paymentUserDo.Columns(cols...) }

func (p *paymentUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *paymentUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 4)
	p.fieldMap["id"] = p.ID
	p.fieldMap["twinte_user_id"] = p.TwinteUserID
	p.fieldMap["display_name"] = p.DisplayName
	p.fieldMap["link"] = p.Link
}

func (p paymentUser) clone(db *gorm.DB) paymentUser {
	p.paymentUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p paymentUser) replaceDB(db *gorm.DB) paymentUser {
	p.paymentUserDo.ReplaceDB(db)
	return p
}

type paymentUserDo struct{ gen.DO }

func (p paymentUserDo) Debug() *paymentUserDo {
	return p.withDO(p.DO.Debug())
}

func (p paymentUserDo) WithContext(ctx context.Context) *paymentUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p paymentUserDo) ReadDB() *paymentUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p paymentUserDo) WriteDB() *paymentUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p paymentUserDo) Session(config *gorm.Session) *paymentUserDo {
	return p.withDO(p.DO.Session(config))
}

func (p paymentUserDo) Clauses(conds ...clause.Expression) *paymentUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p paymentUserDo) Returning(value interface{}, columns ...string) *paymentUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p paymentUserDo) Not(conds ...gen.Condition) *paymentUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p paymentUserDo) Or(conds ...gen.Condition) *paymentUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p paymentUserDo) Select(conds ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p paymentUserDo) Where(conds ...gen.Condition) *paymentUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p paymentUserDo) Order(conds ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p paymentUserDo) Distinct(cols ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p paymentUserDo) Omit(cols ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p paymentUserDo) Join(table schema.Tabler, on ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p paymentUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p paymentUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p paymentUserDo) Group(cols ...field.Expr) *paymentUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p paymentUserDo) Having(conds ...gen.Condition) *paymentUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p paymentUserDo) Limit(limit int) *paymentUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p paymentUserDo) Offset(offset int) *paymentUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p paymentUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *paymentUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p paymentUserDo) Unscoped() *paymentUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p paymentUserDo) Create(values ...*model.PaymentUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p paymentUserDo) CreateInBatches(values []*model.PaymentUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p paymentUserDo) Save(values ...*model.PaymentUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p paymentUserDo) First() (*model.PaymentUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentUser), nil
	}
}

func (p paymentUserDo) Take() (*model.PaymentUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentUser), nil
	}
}

func (p paymentUserDo) Last() (*model.PaymentUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentUser), nil
	}
}

func (p paymentUserDo) Find() ([]*model.PaymentUser, error) {
	result, err := p.DO.Find()
	return result.([]*model.PaymentUser), err
}

func (p paymentUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PaymentUser, err error) {
	buf := make([]*model.PaymentUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p paymentUserDo) FindInBatches(result *[]*model.PaymentUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p paymentUserDo) Attrs(attrs ...field.AssignExpr) *paymentUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p paymentUserDo) Assign(attrs ...field.AssignExpr) *paymentUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p paymentUserDo) Joins(fields ...field.RelationField) *paymentUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p paymentUserDo) Preload(fields ...field.RelationField) *paymentUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p paymentUserDo) FirstOrInit() (*model.PaymentUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentUser), nil
	}
}

func (p paymentUserDo) FirstOrCreate() (*model.PaymentUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PaymentUser), nil
	}
}

func (p paymentUserDo) FindByPage(offset int, limit int) (result []*model.PaymentUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p paymentUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p paymentUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p paymentUserDo) Delete(models ...*model.PaymentUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *paymentUserDo) withDO(do gen.Dao) *paymentUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
