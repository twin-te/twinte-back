// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: unified/v1/service.proto

package timetablev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twin-te/twinte-back/api/rpcgen/unified/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// UnifiedServiceName is the fully-qualified name of the UnifiedService service.
	UnifiedServiceName = "unified.v1.UnifiedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UnifiedServiceGetForFrontProcedure is the fully-qualified name of the UnifiedService's
	// GetForFront RPC.
	UnifiedServiceGetForFrontProcedure = "/unified.v1.UnifiedService/GetForFront"
	// UnifiedServiceGetForWidgetProcedure is the fully-qualified name of the UnifiedService's
	// GetForWidget RPC.
	UnifiedServiceGetForWidgetProcedure = "/unified.v1.UnifiedService/GetForWidget"
)

// UnifiedServiceClient is a client for the unified.v1.UnifiedService service.
type UnifiedServiceClient interface {
	GetForFront(context.Context, *connect_go.Request[v1.GetForFrontRequest]) (*connect_go.Response[v1.GetForFrontResponse], error)
	GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error)
}

// NewUnifiedServiceClient constructs a client for the unified.v1.UnifiedService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUnifiedServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UnifiedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &unifiedServiceClient{
		getForFront: connect_go.NewClient[v1.GetForFrontRequest, v1.GetForFrontResponse](
			httpClient,
			baseURL+UnifiedServiceGetForFrontProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getForWidget: connect_go.NewClient[v1.GetForWidgetRequest, v1.GetForWidgetResponse](
			httpClient,
			baseURL+UnifiedServiceGetForWidgetProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// unifiedServiceClient implements UnifiedServiceClient.
type unifiedServiceClient struct {
	getForFront  *connect_go.Client[v1.GetForFrontRequest, v1.GetForFrontResponse]
	getForWidget *connect_go.Client[v1.GetForWidgetRequest, v1.GetForWidgetResponse]
}

// GetForFront calls unified.v1.UnifiedService.GetForFront.
func (c *unifiedServiceClient) GetForFront(ctx context.Context, req *connect_go.Request[v1.GetForFrontRequest]) (*connect_go.Response[v1.GetForFrontResponse], error) {
	return c.getForFront.CallUnary(ctx, req)
}

// GetForWidget calls unified.v1.UnifiedService.GetForWidget.
func (c *unifiedServiceClient) GetForWidget(ctx context.Context, req *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error) {
	return c.getForWidget.CallUnary(ctx, req)
}

// UnifiedServiceHandler is an implementation of the unified.v1.UnifiedService service.
type UnifiedServiceHandler interface {
	GetForFront(context.Context, *connect_go.Request[v1.GetForFrontRequest]) (*connect_go.Response[v1.GetForFrontResponse], error)
	GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error)
}

// NewUnifiedServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUnifiedServiceHandler(svc UnifiedServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	unifiedServiceGetForFrontHandler := connect_go.NewUnaryHandler(
		UnifiedServiceGetForFrontProcedure,
		svc.GetForFront,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	unifiedServiceGetForWidgetHandler := connect_go.NewUnaryHandler(
		UnifiedServiceGetForWidgetProcedure,
		svc.GetForWidget,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	return "/unified.v1.UnifiedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UnifiedServiceGetForFrontProcedure:
			unifiedServiceGetForFrontHandler.ServeHTTP(w, r)
		case UnifiedServiceGetForWidgetProcedure:
			unifiedServiceGetForWidgetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUnifiedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUnifiedServiceHandler struct{}

func (UnimplementedUnifiedServiceHandler) GetForFront(context.Context, *connect_go.Request[v1.GetForFrontRequest]) (*connect_go.Response[v1.GetForFrontResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("unified.v1.UnifiedService.GetForFront is not implemented"))
}

func (UnimplementedUnifiedServiceHandler) GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("unified.v1.UnifiedService.GetForWidget is not implemented"))
}
