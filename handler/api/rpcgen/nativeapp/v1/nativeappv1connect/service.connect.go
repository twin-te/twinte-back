// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: nativeapp/v1/service.proto

package nativeappv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twin-te/twinte-back/handler/api/rpcgen/nativeapp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// NativeAppServiceName is the fully-qualified name of the NativeAppService service.
	NativeAppServiceName = "nativeapp.v1.NativeAppService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NativeAppServiceGetForWidgetProcedure is the fully-qualified name of the NativeAppService's
	// GetForWidget RPC.
	NativeAppServiceGetForWidgetProcedure = "/nativeapp.v1.NativeAppService/GetForWidget"
)

// NativeAppServiceClient is a client for the nativeapp.v1.NativeAppService service.
type NativeAppServiceClient interface {
	// GetForWidget returns the data for widget.
	//
	// [Authentication] optional
	GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error)
}

// NewNativeAppServiceClient constructs a client for the nativeapp.v1.NativeAppService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNativeAppServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) NativeAppServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &nativeAppServiceClient{
		getForWidget: connect_go.NewClient[v1.GetForWidgetRequest, v1.GetForWidgetResponse](
			httpClient,
			baseURL+NativeAppServiceGetForWidgetProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
	}
}

// nativeAppServiceClient implements NativeAppServiceClient.
type nativeAppServiceClient struct {
	getForWidget *connect_go.Client[v1.GetForWidgetRequest, v1.GetForWidgetResponse]
}

// GetForWidget calls nativeapp.v1.NativeAppService.GetForWidget.
func (c *nativeAppServiceClient) GetForWidget(ctx context.Context, req *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error) {
	return c.getForWidget.CallUnary(ctx, req)
}

// NativeAppServiceHandler is an implementation of the nativeapp.v1.NativeAppService service.
type NativeAppServiceHandler interface {
	// GetForWidget returns the data for widget.
	//
	// [Authentication] optional
	GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error)
}

// NewNativeAppServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNativeAppServiceHandler(svc NativeAppServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	nativeAppServiceGetForWidgetHandler := connect_go.NewUnaryHandler(
		NativeAppServiceGetForWidgetProcedure,
		svc.GetForWidget,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	return "/nativeapp.v1.NativeAppService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NativeAppServiceGetForWidgetProcedure:
			nativeAppServiceGetForWidgetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNativeAppServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNativeAppServiceHandler struct{}

func (UnimplementedNativeAppServiceHandler) GetForWidget(context.Context, *connect_go.Request[v1.GetForWidgetRequest]) (*connect_go.Response[v1.GetForWidgetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("nativeapp.v1.NativeAppService.GetForWidget is not implemented"))
}
