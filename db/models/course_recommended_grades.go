// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CourseRecommendedGrade is an object representing the database table.
type CourseRecommendedGrade struct {
	ID       int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Grade    int16       `boil:"grade" json:"grade" toml:"grade" yaml:"grade"`
	CourseID null.String `boil:"course_id" json:"course_id,omitempty" toml:"course_id" yaml:"course_id,omitempty"`

	R *courseRecommendedGradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L courseRecommendedGradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourseRecommendedGradeColumns = struct {
	ID       string
	Grade    string
	CourseID string
}{
	ID:       "id",
	Grade:    "grade",
	CourseID: "course_id",
}

var CourseRecommendedGradeTableColumns = struct {
	ID       string
	Grade    string
	CourseID string
}{
	ID:       "course_recommended_grades.id",
	Grade:    "course_recommended_grades.grade",
	CourseID: "course_recommended_grades.course_id",
}

// Generated where

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CourseRecommendedGradeWhere = struct {
	ID       whereHelperint
	Grade    whereHelperint16
	CourseID whereHelpernull_String
}{
	ID:       whereHelperint{field: "\"course_recommended_grades\".\"id\""},
	Grade:    whereHelperint16{field: "\"course_recommended_grades\".\"grade\""},
	CourseID: whereHelpernull_String{field: "\"course_recommended_grades\".\"course_id\""},
}

// CourseRecommendedGradeRels is where relationship names are stored.
var CourseRecommendedGradeRels = struct {
	Course string
}{
	Course: "Course",
}

// courseRecommendedGradeR is where relationships are stored.
type courseRecommendedGradeR struct {
	Course *Course `boil:"Course" json:"Course" toml:"Course" yaml:"Course"`
}

// NewStruct creates a new relationship struct
func (*courseRecommendedGradeR) NewStruct() *courseRecommendedGradeR {
	return &courseRecommendedGradeR{}
}

func (r *courseRecommendedGradeR) GetCourse() *Course {
	if r == nil {
		return nil
	}
	return r.Course
}

// courseRecommendedGradeL is where Load methods for each relationship are stored.
type courseRecommendedGradeL struct{}

var (
	courseRecommendedGradeAllColumns            = []string{"id", "grade", "course_id"}
	courseRecommendedGradeColumnsWithoutDefault = []string{"grade"}
	courseRecommendedGradeColumnsWithDefault    = []string{"id", "course_id"}
	courseRecommendedGradePrimaryKeyColumns     = []string{"id"}
	courseRecommendedGradeGeneratedColumns      = []string{}
)

type (
	// CourseRecommendedGradeSlice is an alias for a slice of pointers to CourseRecommendedGrade.
	// This should almost always be used instead of []CourseRecommendedGrade.
	CourseRecommendedGradeSlice []*CourseRecommendedGrade
	// CourseRecommendedGradeHook is the signature for custom CourseRecommendedGrade hook methods
	CourseRecommendedGradeHook func(context.Context, boil.ContextExecutor, *CourseRecommendedGrade) error

	courseRecommendedGradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courseRecommendedGradeType                 = reflect.TypeOf(&CourseRecommendedGrade{})
	courseRecommendedGradeMapping              = queries.MakeStructMapping(courseRecommendedGradeType)
	courseRecommendedGradePrimaryKeyMapping, _ = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, courseRecommendedGradePrimaryKeyColumns)
	courseRecommendedGradeInsertCacheMut       sync.RWMutex
	courseRecommendedGradeInsertCache          = make(map[string]insertCache)
	courseRecommendedGradeUpdateCacheMut       sync.RWMutex
	courseRecommendedGradeUpdateCache          = make(map[string]updateCache)
	courseRecommendedGradeUpsertCacheMut       sync.RWMutex
	courseRecommendedGradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var courseRecommendedGradeAfterSelectHooks []CourseRecommendedGradeHook

var courseRecommendedGradeBeforeInsertHooks []CourseRecommendedGradeHook
var courseRecommendedGradeAfterInsertHooks []CourseRecommendedGradeHook

var courseRecommendedGradeBeforeUpdateHooks []CourseRecommendedGradeHook
var courseRecommendedGradeAfterUpdateHooks []CourseRecommendedGradeHook

var courseRecommendedGradeBeforeDeleteHooks []CourseRecommendedGradeHook
var courseRecommendedGradeAfterDeleteHooks []CourseRecommendedGradeHook

var courseRecommendedGradeBeforeUpsertHooks []CourseRecommendedGradeHook
var courseRecommendedGradeAfterUpsertHooks []CourseRecommendedGradeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CourseRecommendedGrade) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CourseRecommendedGrade) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CourseRecommendedGrade) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CourseRecommendedGrade) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CourseRecommendedGrade) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CourseRecommendedGrade) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CourseRecommendedGrade) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CourseRecommendedGrade) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CourseRecommendedGrade) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range courseRecommendedGradeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCourseRecommendedGradeHook registers your hook function for all future operations.
func AddCourseRecommendedGradeHook(hookPoint boil.HookPoint, courseRecommendedGradeHook CourseRecommendedGradeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		courseRecommendedGradeAfterSelectHooks = append(courseRecommendedGradeAfterSelectHooks, courseRecommendedGradeHook)
	case boil.BeforeInsertHook:
		courseRecommendedGradeBeforeInsertHooks = append(courseRecommendedGradeBeforeInsertHooks, courseRecommendedGradeHook)
	case boil.AfterInsertHook:
		courseRecommendedGradeAfterInsertHooks = append(courseRecommendedGradeAfterInsertHooks, courseRecommendedGradeHook)
	case boil.BeforeUpdateHook:
		courseRecommendedGradeBeforeUpdateHooks = append(courseRecommendedGradeBeforeUpdateHooks, courseRecommendedGradeHook)
	case boil.AfterUpdateHook:
		courseRecommendedGradeAfterUpdateHooks = append(courseRecommendedGradeAfterUpdateHooks, courseRecommendedGradeHook)
	case boil.BeforeDeleteHook:
		courseRecommendedGradeBeforeDeleteHooks = append(courseRecommendedGradeBeforeDeleteHooks, courseRecommendedGradeHook)
	case boil.AfterDeleteHook:
		courseRecommendedGradeAfterDeleteHooks = append(courseRecommendedGradeAfterDeleteHooks, courseRecommendedGradeHook)
	case boil.BeforeUpsertHook:
		courseRecommendedGradeBeforeUpsertHooks = append(courseRecommendedGradeBeforeUpsertHooks, courseRecommendedGradeHook)
	case boil.AfterUpsertHook:
		courseRecommendedGradeAfterUpsertHooks = append(courseRecommendedGradeAfterUpsertHooks, courseRecommendedGradeHook)
	}
}

// One returns a single courseRecommendedGrade record from the query.
func (q courseRecommendedGradeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CourseRecommendedGrade, error) {
	o := &CourseRecommendedGrade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for course_recommended_grades")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CourseRecommendedGrade records from the query.
func (q courseRecommendedGradeQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourseRecommendedGradeSlice, error) {
	var o []*CourseRecommendedGrade

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to CourseRecommendedGrade slice")
	}

	if len(courseRecommendedGradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CourseRecommendedGrade records in the query.
func (q courseRecommendedGradeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count course_recommended_grades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courseRecommendedGradeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if course_recommended_grades exists")
	}

	return count > 0, nil
}

// Course pointed to by the foreign key.
func (o *CourseRecommendedGrade) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	return Courses(queryMods...)
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (courseRecommendedGradeL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourseRecommendedGrade interface{}, mods queries.Applicator) error {
	var slice []*CourseRecommendedGrade
	var object *CourseRecommendedGrade

	if singular {
		var ok bool
		object, ok = maybeCourseRecommendedGrade.(*CourseRecommendedGrade)
		if !ok {
			object = new(CourseRecommendedGrade)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourseRecommendedGrade)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourseRecommendedGrade))
			}
		}
	} else {
		s, ok := maybeCourseRecommendedGrade.(*[]*CourseRecommendedGrade)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourseRecommendedGrade)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourseRecommendedGrade))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courseRecommendedGradeR{}
		}
		if !queries.IsNil(object.CourseID) {
			args = append(args, object.CourseID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courseRecommendedGradeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CourseID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CourseID) {
				args = append(args, obj.CourseID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`courses`),
		qm.WhereIn(`courses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for courses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for courses")
	}

	if len(courseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.CourseRecommendedGrades = append(foreign.R.CourseRecommendedGrades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CourseID, foreign.ID) {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.CourseRecommendedGrades = append(foreign.R.CourseRecommendedGrades, local)
				break
			}
		}
	}

	return nil
}

// SetCourse of the courseRecommendedGrade to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.CourseRecommendedGrades.
func (o *CourseRecommendedGrade) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"course_recommended_grades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
		strmangle.WhereClause("\"", "\"", 2, courseRecommendedGradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CourseID, related.ID)
	if o.R == nil {
		o.R = &courseRecommendedGradeR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			CourseRecommendedGrades: CourseRecommendedGradeSlice{o},
		}
	} else {
		related.R.CourseRecommendedGrades = append(related.R.CourseRecommendedGrades, o)
	}

	return nil
}

// RemoveCourse relationship.
// Sets o.R.Course to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CourseRecommendedGrade) RemoveCourse(ctx context.Context, exec boil.ContextExecutor, related *Course) error {
	var err error

	queries.SetScanner(&o.CourseID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("course_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Course = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CourseRecommendedGrades {
		if queries.Equal(o.CourseID, ri.CourseID) {
			continue
		}

		ln := len(related.R.CourseRecommendedGrades)
		if ln > 1 && i < ln-1 {
			related.R.CourseRecommendedGrades[i] = related.R.CourseRecommendedGrades[ln-1]
		}
		related.R.CourseRecommendedGrades = related.R.CourseRecommendedGrades[:ln-1]
		break
	}
	return nil
}

// CourseRecommendedGrades retrieves all the records using an executor.
func CourseRecommendedGrades(mods ...qm.QueryMod) courseRecommendedGradeQuery {
	mods = append(mods, qm.From("\"course_recommended_grades\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"course_recommended_grades\".*"})
	}

	return courseRecommendedGradeQuery{q}
}

// FindCourseRecommendedGrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourseRecommendedGrade(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CourseRecommendedGrade, error) {
	courseRecommendedGradeObj := &CourseRecommendedGrade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"course_recommended_grades\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, courseRecommendedGradeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from course_recommended_grades")
	}

	if err = courseRecommendedGradeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return courseRecommendedGradeObj, err
	}

	return courseRecommendedGradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CourseRecommendedGrade) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no course_recommended_grades provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseRecommendedGradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courseRecommendedGradeInsertCacheMut.RLock()
	cache, cached := courseRecommendedGradeInsertCache[key]
	courseRecommendedGradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courseRecommendedGradeAllColumns,
			courseRecommendedGradeColumnsWithDefault,
			courseRecommendedGradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"course_recommended_grades\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"course_recommended_grades\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into course_recommended_grades")
	}

	if !cached {
		courseRecommendedGradeInsertCacheMut.Lock()
		courseRecommendedGradeInsertCache[key] = cache
		courseRecommendedGradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CourseRecommendedGrade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CourseRecommendedGrade) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	courseRecommendedGradeUpdateCacheMut.RLock()
	cache, cached := courseRecommendedGradeUpdateCache[key]
	courseRecommendedGradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courseRecommendedGradeAllColumns,
			courseRecommendedGradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update course_recommended_grades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"course_recommended_grades\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, courseRecommendedGradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, append(wl, courseRecommendedGradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update course_recommended_grades row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for course_recommended_grades")
	}

	if !cached {
		courseRecommendedGradeUpdateCacheMut.Lock()
		courseRecommendedGradeUpdateCache[key] = cache
		courseRecommendedGradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q courseRecommendedGradeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for course_recommended_grades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for course_recommended_grades")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourseRecommendedGradeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseRecommendedGradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"course_recommended_grades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, courseRecommendedGradePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in courseRecommendedGrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all courseRecommendedGrade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CourseRecommendedGrade) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no course_recommended_grades provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(courseRecommendedGradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courseRecommendedGradeUpsertCacheMut.RLock()
	cache, cached := courseRecommendedGradeUpsertCache[key]
	courseRecommendedGradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courseRecommendedGradeAllColumns,
			courseRecommendedGradeColumnsWithDefault,
			courseRecommendedGradeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			courseRecommendedGradeAllColumns,
			courseRecommendedGradePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert course_recommended_grades, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(courseRecommendedGradePrimaryKeyColumns))
			copy(conflict, courseRecommendedGradePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"course_recommended_grades\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courseRecommendedGradeType, courseRecommendedGradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert course_recommended_grades")
	}

	if !cached {
		courseRecommendedGradeUpsertCacheMut.Lock()
		courseRecommendedGradeUpsertCache[key] = cache
		courseRecommendedGradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CourseRecommendedGrade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CourseRecommendedGrade) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no CourseRecommendedGrade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), courseRecommendedGradePrimaryKeyMapping)
	sql := "DELETE FROM \"course_recommended_grades\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from course_recommended_grades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for course_recommended_grades")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courseRecommendedGradeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no courseRecommendedGradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from course_recommended_grades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for course_recommended_grades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourseRecommendedGradeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(courseRecommendedGradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseRecommendedGradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"course_recommended_grades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, courseRecommendedGradePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from courseRecommendedGrade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for course_recommended_grades")
	}

	if len(courseRecommendedGradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CourseRecommendedGrade) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourseRecommendedGrade(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourseRecommendedGradeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourseRecommendedGradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courseRecommendedGradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"course_recommended_grades\".* FROM \"course_recommended_grades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, courseRecommendedGradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in CourseRecommendedGradeSlice")
	}

	*o = slice

	return nil
}

// CourseRecommendedGradeExists checks if the CourseRecommendedGrade row exists.
func CourseRecommendedGradeExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"course_recommended_grades\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if course_recommended_grades exists")
	}

	return exists, nil
}

// Exists checks if the CourseRecommendedGrade row exists.
func (o *CourseRecommendedGrade) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CourseRecommendedGradeExists(ctx, exec, o.ID)
}
