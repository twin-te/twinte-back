// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/service.proto

package authv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/twin-te/twinte-back/api/rpcgen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceGetMeProcedure is the fully-qualified name of the AuthService's GetMe RPC.
	AuthServiceGetMeProcedure = "/auth.v1.AuthService/GetMe"
	// AuthServiceDeleteUserAuthenticationProcedure is the fully-qualified name of the AuthService's
	// DeleteUserAuthentication RPC.
	AuthServiceDeleteUserAuthenticationProcedure = "/auth.v1.AuthService/DeleteUserAuthentication"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/auth.v1.AuthService/Logout"
	// AuthServiceDeleteAccountProcedure is the fully-qualified name of the AuthService's DeleteAccount
	// RPC.
	AuthServiceDeleteAccountProcedure = "/auth.v1.AuthService/DeleteAccount"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	GetMe(context.Context, *connect_go.Request[v1.GetMeRequest]) (*connect_go.Response[v1.GetMeResponse], error)
	DeleteUserAuthentication(context.Context, *connect_go.Request[v1.DeleteUserAuthenticationRequest]) (*connect_go.Response[v1.DeleteUserAuthenticationResponse], error)
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		getMe: connect_go.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+AuthServiceGetMeProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		deleteUserAuthentication: connect_go.NewClient[v1.DeleteUserAuthenticationRequest, v1.DeleteUserAuthenticationResponse](
			httpClient,
			baseURL+AuthServiceDeleteUserAuthenticationProcedure,
			opts...,
		),
		logout: connect_go.NewClient[v1.LogoutRequest, v1.LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			opts...,
		),
		deleteAccount: connect_go.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AuthServiceDeleteAccountProcedure,
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	getMe                    *connect_go.Client[v1.GetMeRequest, v1.GetMeResponse]
	deleteUserAuthentication *connect_go.Client[v1.DeleteUserAuthenticationRequest, v1.DeleteUserAuthenticationResponse]
	logout                   *connect_go.Client[v1.LogoutRequest, v1.LogoutResponse]
	deleteAccount            *connect_go.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
}

// GetMe calls auth.v1.AuthService.GetMe.
func (c *authServiceClient) GetMe(ctx context.Context, req *connect_go.Request[v1.GetMeRequest]) (*connect_go.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// DeleteUserAuthentication calls auth.v1.AuthService.DeleteUserAuthentication.
func (c *authServiceClient) DeleteUserAuthentication(ctx context.Context, req *connect_go.Request[v1.DeleteUserAuthenticationRequest]) (*connect_go.Response[v1.DeleteUserAuthenticationResponse], error) {
	return c.deleteUserAuthentication.CallUnary(ctx, req)
}

// Logout calls auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// DeleteAccount calls auth.v1.AuthService.DeleteAccount.
func (c *authServiceClient) DeleteAccount(ctx context.Context, req *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	GetMe(context.Context, *connect_go.Request[v1.GetMeRequest]) (*connect_go.Response[v1.GetMeResponse], error)
	DeleteUserAuthentication(context.Context, *connect_go.Request[v1.DeleteUserAuthenticationRequest]) (*connect_go.Response[v1.DeleteUserAuthenticationResponse], error)
	Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error)
	DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	authServiceGetMeHandler := connect_go.NewUnaryHandler(
		AuthServiceGetMeProcedure,
		svc.GetMe,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	authServiceDeleteUserAuthenticationHandler := connect_go.NewUnaryHandler(
		AuthServiceDeleteUserAuthenticationProcedure,
		svc.DeleteUserAuthentication,
		opts...,
	)
	authServiceLogoutHandler := connect_go.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		opts...,
	)
	authServiceDeleteAccountHandler := connect_go.NewUnaryHandler(
		AuthServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		opts...,
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceGetMeProcedure:
			authServiceGetMeHandler.ServeHTTP(w, r)
		case AuthServiceDeleteUserAuthenticationProcedure:
			authServiceDeleteUserAuthenticationHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceDeleteAccountProcedure:
			authServiceDeleteAccountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GetMe(context.Context, *connect_go.Request[v1.GetMeRequest]) (*connect_go.Response[v1.GetMeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.GetMe is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteUserAuthentication(context.Context, *connect_go.Request[v1.DeleteUserAuthenticationRequest]) (*connect_go.Response[v1.DeleteUserAuthenticationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.DeleteUserAuthentication is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect_go.Request[v1.LogoutRequest]) (*connect_go.Response[v1.LogoutResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) DeleteAccount(context.Context, *connect_go.Request[v1.DeleteAccountRequest]) (*connect_go.Response[v1.DeleteAccountResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("auth.v1.AuthService.DeleteAccount is not implemented"))
}
