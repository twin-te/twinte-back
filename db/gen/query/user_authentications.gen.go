// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newUserAuthentication(db *gorm.DB, opts ...gen.DOOption) userAuthentication {
	_userAuthentication := userAuthentication{}

	_userAuthentication.userAuthenticationDo.UseDB(db, opts...)
	_userAuthentication.userAuthenticationDo.UseModel(&model.UserAuthentication{})

	tableName := _userAuthentication.userAuthenticationDo.TableName()
	_userAuthentication.ALL = field.NewAsterisk(tableName)
	_userAuthentication.ID = field.NewInt32(tableName, "id")
	_userAuthentication.Provider = field.NewString(tableName, "provider")
	_userAuthentication.SocialID = field.NewString(tableName, "social_id")
	_userAuthentication.UserID = field.NewString(tableName, "user_id")

	_userAuthentication.fillFieldMap()

	return _userAuthentication
}

type userAuthentication struct {
	userAuthenticationDo userAuthenticationDo

	ALL      field.Asterisk
	ID       field.Int32
	Provider field.String
	SocialID field.String
	UserID   field.String

	fieldMap map[string]field.Expr
}

func (u userAuthentication) Table(newTableName string) *userAuthentication {
	u.userAuthenticationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userAuthentication) As(alias string) *userAuthentication {
	u.userAuthenticationDo.DO = *(u.userAuthenticationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userAuthentication) updateTableName(table string) *userAuthentication {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Provider = field.NewString(table, "provider")
	u.SocialID = field.NewString(table, "social_id")
	u.UserID = field.NewString(table, "user_id")

	u.fillFieldMap()

	return u
}

func (u *userAuthentication) WithContext(ctx context.Context) *userAuthenticationDo {
	return u.userAuthenticationDo.WithContext(ctx)
}

func (u userAuthentication) TableName() string { return u.userAuthenticationDo.TableName() }

func (u userAuthentication) Alias() string { return u.userAuthenticationDo.Alias() }

func (u userAuthentication) Columns(cols ...field.Expr) gen.Columns {
	return u.userAuthenticationDo.Columns(cols...)
}

func (u *userAuthentication) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userAuthentication) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["provider"] = u.Provider
	u.fieldMap["social_id"] = u.SocialID
	u.fieldMap["user_id"] = u.UserID
}

func (u userAuthentication) clone(db *gorm.DB) userAuthentication {
	u.userAuthenticationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userAuthentication) replaceDB(db *gorm.DB) userAuthentication {
	u.userAuthenticationDo.ReplaceDB(db)
	return u
}

type userAuthenticationDo struct{ gen.DO }

func (u userAuthenticationDo) Debug() *userAuthenticationDo {
	return u.withDO(u.DO.Debug())
}

func (u userAuthenticationDo) WithContext(ctx context.Context) *userAuthenticationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userAuthenticationDo) ReadDB() *userAuthenticationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userAuthenticationDo) WriteDB() *userAuthenticationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userAuthenticationDo) Session(config *gorm.Session) *userAuthenticationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userAuthenticationDo) Clauses(conds ...clause.Expression) *userAuthenticationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userAuthenticationDo) Returning(value interface{}, columns ...string) *userAuthenticationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userAuthenticationDo) Not(conds ...gen.Condition) *userAuthenticationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userAuthenticationDo) Or(conds ...gen.Condition) *userAuthenticationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userAuthenticationDo) Select(conds ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userAuthenticationDo) Where(conds ...gen.Condition) *userAuthenticationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userAuthenticationDo) Order(conds ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userAuthenticationDo) Distinct(cols ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userAuthenticationDo) Omit(cols ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userAuthenticationDo) Join(table schema.Tabler, on ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userAuthenticationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userAuthenticationDo) RightJoin(table schema.Tabler, on ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userAuthenticationDo) Group(cols ...field.Expr) *userAuthenticationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userAuthenticationDo) Having(conds ...gen.Condition) *userAuthenticationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userAuthenticationDo) Limit(limit int) *userAuthenticationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userAuthenticationDo) Offset(offset int) *userAuthenticationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userAuthenticationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userAuthenticationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userAuthenticationDo) Unscoped() *userAuthenticationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userAuthenticationDo) Create(values ...*model.UserAuthentication) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userAuthenticationDo) CreateInBatches(values []*model.UserAuthentication, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userAuthenticationDo) Save(values ...*model.UserAuthentication) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userAuthenticationDo) First() (*model.UserAuthentication, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuthentication), nil
	}
}

func (u userAuthenticationDo) Take() (*model.UserAuthentication, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuthentication), nil
	}
}

func (u userAuthenticationDo) Last() (*model.UserAuthentication, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuthentication), nil
	}
}

func (u userAuthenticationDo) Find() ([]*model.UserAuthentication, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserAuthentication), err
}

func (u userAuthenticationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserAuthentication, err error) {
	buf := make([]*model.UserAuthentication, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userAuthenticationDo) FindInBatches(result *[]*model.UserAuthentication, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userAuthenticationDo) Attrs(attrs ...field.AssignExpr) *userAuthenticationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userAuthenticationDo) Assign(attrs ...field.AssignExpr) *userAuthenticationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userAuthenticationDo) Joins(fields ...field.RelationField) *userAuthenticationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userAuthenticationDo) Preload(fields ...field.RelationField) *userAuthenticationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userAuthenticationDo) FirstOrInit() (*model.UserAuthentication, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuthentication), nil
	}
}

func (u userAuthenticationDo) FirstOrCreate() (*model.UserAuthentication, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserAuthentication), nil
	}
}

func (u userAuthenticationDo) FindByPage(offset int, limit int) (result []*model.UserAuthentication, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userAuthenticationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userAuthenticationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userAuthenticationDo) Delete(models ...*model.UserAuthentication) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userAuthenticationDo) withDO(do gen.Dao) *userAuthenticationDo {
	u.DO = *do.(*gen.DO)
	return u
}
