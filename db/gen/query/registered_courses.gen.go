// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newRegisteredCourse(db *gorm.DB, opts ...gen.DOOption) registeredCourse {
	_registeredCourse := registeredCourse{}

	_registeredCourse.registeredCourseDo.UseDB(db, opts...)
	_registeredCourse.registeredCourseDo.UseModel(&model.RegisteredCourse{})

	tableName := _registeredCourse.registeredCourseDo.TableName()
	_registeredCourse.ALL = field.NewAsterisk(tableName)
	_registeredCourse.ID = field.NewString(tableName, "id")
	_registeredCourse.UserID = field.NewString(tableName, "user_id")
	_registeredCourse.Year = field.NewInt16(tableName, "year")
	_registeredCourse.CourseID = field.NewString(tableName, "course_id")
	_registeredCourse.Name = field.NewString(tableName, "name")
	_registeredCourse.Instractor = field.NewString(tableName, "instractor")
	_registeredCourse.Credit = field.NewFloat64(tableName, "credit")
	_registeredCourse.Methods = field.NewField(tableName, "methods")
	_registeredCourse.Schedules = field.NewBytes(tableName, "schedules")
	_registeredCourse.Memo = field.NewString(tableName, "memo")
	_registeredCourse.Attendance = field.NewInt32(tableName, "attendance")
	_registeredCourse.Absence = field.NewInt32(tableName, "absence")
	_registeredCourse.Late = field.NewInt32(tableName, "late")

	_registeredCourse.fillFieldMap()

	return _registeredCourse
}

type registeredCourse struct {
	registeredCourseDo registeredCourseDo

	ALL        field.Asterisk
	ID         field.String
	UserID     field.String
	Year       field.Int16
	CourseID   field.String
	Name       field.String
	Instractor field.String
	Credit     field.Float64
	Methods    field.Field
	Schedules  field.Bytes
	Memo       field.String
	Attendance field.Int32
	Absence    field.Int32
	Late       field.Int32

	fieldMap map[string]field.Expr
}

func (r registeredCourse) Table(newTableName string) *registeredCourse {
	r.registeredCourseDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registeredCourse) As(alias string) *registeredCourse {
	r.registeredCourseDo.DO = *(r.registeredCourseDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registeredCourse) updateTableName(table string) *registeredCourse {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.UserID = field.NewString(table, "user_id")
	r.Year = field.NewInt16(table, "year")
	r.CourseID = field.NewString(table, "course_id")
	r.Name = field.NewString(table, "name")
	r.Instractor = field.NewString(table, "instractor")
	r.Credit = field.NewFloat64(table, "credit")
	r.Methods = field.NewField(table, "methods")
	r.Schedules = field.NewBytes(table, "schedules")
	r.Memo = field.NewString(table, "memo")
	r.Attendance = field.NewInt32(table, "attendance")
	r.Absence = field.NewInt32(table, "absence")
	r.Late = field.NewInt32(table, "late")

	r.fillFieldMap()

	return r
}

func (r *registeredCourse) WithContext(ctx context.Context) *registeredCourseDo {
	return r.registeredCourseDo.WithContext(ctx)
}

func (r registeredCourse) TableName() string { return r.registeredCourseDo.TableName() }

func (r registeredCourse) Alias() string { return r.registeredCourseDo.Alias() }

func (r registeredCourse) Columns(cols ...field.Expr) gen.Columns {
	return r.registeredCourseDo.Columns(cols...)
}

func (r *registeredCourse) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registeredCourse) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 13)
	r.fieldMap["id"] = r.ID
	r.fieldMap["user_id"] = r.UserID
	r.fieldMap["year"] = r.Year
	r.fieldMap["course_id"] = r.CourseID
	r.fieldMap["name"] = r.Name
	r.fieldMap["instractor"] = r.Instractor
	r.fieldMap["credit"] = r.Credit
	r.fieldMap["methods"] = r.Methods
	r.fieldMap["schedules"] = r.Schedules
	r.fieldMap["memo"] = r.Memo
	r.fieldMap["attendance"] = r.Attendance
	r.fieldMap["absence"] = r.Absence
	r.fieldMap["late"] = r.Late
}

func (r registeredCourse) clone(db *gorm.DB) registeredCourse {
	r.registeredCourseDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registeredCourse) replaceDB(db *gorm.DB) registeredCourse {
	r.registeredCourseDo.ReplaceDB(db)
	return r
}

type registeredCourseDo struct{ gen.DO }

func (r registeredCourseDo) Debug() *registeredCourseDo {
	return r.withDO(r.DO.Debug())
}

func (r registeredCourseDo) WithContext(ctx context.Context) *registeredCourseDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registeredCourseDo) ReadDB() *registeredCourseDo {
	return r.Clauses(dbresolver.Read)
}

func (r registeredCourseDo) WriteDB() *registeredCourseDo {
	return r.Clauses(dbresolver.Write)
}

func (r registeredCourseDo) Session(config *gorm.Session) *registeredCourseDo {
	return r.withDO(r.DO.Session(config))
}

func (r registeredCourseDo) Clauses(conds ...clause.Expression) *registeredCourseDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registeredCourseDo) Returning(value interface{}, columns ...string) *registeredCourseDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registeredCourseDo) Not(conds ...gen.Condition) *registeredCourseDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registeredCourseDo) Or(conds ...gen.Condition) *registeredCourseDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registeredCourseDo) Select(conds ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registeredCourseDo) Where(conds ...gen.Condition) *registeredCourseDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registeredCourseDo) Order(conds ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registeredCourseDo) Distinct(cols ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registeredCourseDo) Omit(cols ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registeredCourseDo) Join(table schema.Tabler, on ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registeredCourseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registeredCourseDo) RightJoin(table schema.Tabler, on ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registeredCourseDo) Group(cols ...field.Expr) *registeredCourseDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registeredCourseDo) Having(conds ...gen.Condition) *registeredCourseDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registeredCourseDo) Limit(limit int) *registeredCourseDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registeredCourseDo) Offset(offset int) *registeredCourseDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registeredCourseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *registeredCourseDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registeredCourseDo) Unscoped() *registeredCourseDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registeredCourseDo) Create(values ...*model.RegisteredCourse) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registeredCourseDo) CreateInBatches(values []*model.RegisteredCourse, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registeredCourseDo) Save(values ...*model.RegisteredCourse) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registeredCourseDo) First() (*model.RegisteredCourse, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourse), nil
	}
}

func (r registeredCourseDo) Take() (*model.RegisteredCourse, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourse), nil
	}
}

func (r registeredCourseDo) Last() (*model.RegisteredCourse, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourse), nil
	}
}

func (r registeredCourseDo) Find() ([]*model.RegisteredCourse, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegisteredCourse), err
}

func (r registeredCourseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisteredCourse, err error) {
	buf := make([]*model.RegisteredCourse, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registeredCourseDo) FindInBatches(result *[]*model.RegisteredCourse, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registeredCourseDo) Attrs(attrs ...field.AssignExpr) *registeredCourseDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registeredCourseDo) Assign(attrs ...field.AssignExpr) *registeredCourseDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registeredCourseDo) Joins(fields ...field.RelationField) *registeredCourseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registeredCourseDo) Preload(fields ...field.RelationField) *registeredCourseDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registeredCourseDo) FirstOrInit() (*model.RegisteredCourse, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourse), nil
	}
}

func (r registeredCourseDo) FirstOrCreate() (*model.RegisteredCourse, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourse), nil
	}
}

func (r registeredCourseDo) FindByPage(offset int, limit int) (result []*model.RegisteredCourse, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registeredCourseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registeredCourseDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registeredCourseDo) Delete(models ...*model.RegisteredCourse) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registeredCourseDo) withDO(do gen.Dao) *registeredCourseDo {
	r.DO = *do.(*gen.DO)
	return r
}
