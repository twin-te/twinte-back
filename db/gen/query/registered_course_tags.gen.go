// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newRegisteredCourseTag(db *gorm.DB, opts ...gen.DOOption) registeredCourseTag {
	_registeredCourseTag := registeredCourseTag{}

	_registeredCourseTag.registeredCourseTagDo.UseDB(db, opts...)
	_registeredCourseTag.registeredCourseTagDo.UseModel(&model.RegisteredCourseTag{})

	tableName := _registeredCourseTag.registeredCourseTagDo.TableName()
	_registeredCourseTag.ALL = field.NewAsterisk(tableName)
	_registeredCourseTag.Tag = field.NewString(tableName, "tag")
	_registeredCourseTag.RegisteredCourse = field.NewString(tableName, "registered_course")

	_registeredCourseTag.fillFieldMap()

	return _registeredCourseTag
}

type registeredCourseTag struct {
	registeredCourseTagDo registeredCourseTagDo

	ALL              field.Asterisk
	Tag              field.String
	RegisteredCourse field.String

	fieldMap map[string]field.Expr
}

func (r registeredCourseTag) Table(newTableName string) *registeredCourseTag {
	r.registeredCourseTagDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registeredCourseTag) As(alias string) *registeredCourseTag {
	r.registeredCourseTagDo.DO = *(r.registeredCourseTagDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registeredCourseTag) updateTableName(table string) *registeredCourseTag {
	r.ALL = field.NewAsterisk(table)
	r.Tag = field.NewString(table, "tag")
	r.RegisteredCourse = field.NewString(table, "registered_course")

	r.fillFieldMap()

	return r
}

func (r *registeredCourseTag) WithContext(ctx context.Context) *registeredCourseTagDo {
	return r.registeredCourseTagDo.WithContext(ctx)
}

func (r registeredCourseTag) TableName() string { return r.registeredCourseTagDo.TableName() }

func (r registeredCourseTag) Alias() string { return r.registeredCourseTagDo.Alias() }

func (r registeredCourseTag) Columns(cols ...field.Expr) gen.Columns {
	return r.registeredCourseTagDo.Columns(cols...)
}

func (r *registeredCourseTag) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registeredCourseTag) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["tag"] = r.Tag
	r.fieldMap["registered_course"] = r.RegisteredCourse
}

func (r registeredCourseTag) clone(db *gorm.DB) registeredCourseTag {
	r.registeredCourseTagDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registeredCourseTag) replaceDB(db *gorm.DB) registeredCourseTag {
	r.registeredCourseTagDo.ReplaceDB(db)
	return r
}

type registeredCourseTagDo struct{ gen.DO }

func (r registeredCourseTagDo) Debug() *registeredCourseTagDo {
	return r.withDO(r.DO.Debug())
}

func (r registeredCourseTagDo) WithContext(ctx context.Context) *registeredCourseTagDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registeredCourseTagDo) ReadDB() *registeredCourseTagDo {
	return r.Clauses(dbresolver.Read)
}

func (r registeredCourseTagDo) WriteDB() *registeredCourseTagDo {
	return r.Clauses(dbresolver.Write)
}

func (r registeredCourseTagDo) Session(config *gorm.Session) *registeredCourseTagDo {
	return r.withDO(r.DO.Session(config))
}

func (r registeredCourseTagDo) Clauses(conds ...clause.Expression) *registeredCourseTagDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registeredCourseTagDo) Returning(value interface{}, columns ...string) *registeredCourseTagDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registeredCourseTagDo) Not(conds ...gen.Condition) *registeredCourseTagDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registeredCourseTagDo) Or(conds ...gen.Condition) *registeredCourseTagDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registeredCourseTagDo) Select(conds ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registeredCourseTagDo) Where(conds ...gen.Condition) *registeredCourseTagDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registeredCourseTagDo) Order(conds ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registeredCourseTagDo) Distinct(cols ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registeredCourseTagDo) Omit(cols ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registeredCourseTagDo) Join(table schema.Tabler, on ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registeredCourseTagDo) LeftJoin(table schema.Tabler, on ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registeredCourseTagDo) RightJoin(table schema.Tabler, on ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registeredCourseTagDo) Group(cols ...field.Expr) *registeredCourseTagDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registeredCourseTagDo) Having(conds ...gen.Condition) *registeredCourseTagDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registeredCourseTagDo) Limit(limit int) *registeredCourseTagDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registeredCourseTagDo) Offset(offset int) *registeredCourseTagDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registeredCourseTagDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *registeredCourseTagDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registeredCourseTagDo) Unscoped() *registeredCourseTagDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registeredCourseTagDo) Create(values ...*model.RegisteredCourseTag) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registeredCourseTagDo) CreateInBatches(values []*model.RegisteredCourseTag, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registeredCourseTagDo) Save(values ...*model.RegisteredCourseTag) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registeredCourseTagDo) First() (*model.RegisteredCourseTag, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourseTag), nil
	}
}

func (r registeredCourseTagDo) Take() (*model.RegisteredCourseTag, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourseTag), nil
	}
}

func (r registeredCourseTagDo) Last() (*model.RegisteredCourseTag, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourseTag), nil
	}
}

func (r registeredCourseTagDo) Find() ([]*model.RegisteredCourseTag, error) {
	result, err := r.DO.Find()
	return result.([]*model.RegisteredCourseTag), err
}

func (r registeredCourseTagDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RegisteredCourseTag, err error) {
	buf := make([]*model.RegisteredCourseTag, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registeredCourseTagDo) FindInBatches(result *[]*model.RegisteredCourseTag, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registeredCourseTagDo) Attrs(attrs ...field.AssignExpr) *registeredCourseTagDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registeredCourseTagDo) Assign(attrs ...field.AssignExpr) *registeredCourseTagDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registeredCourseTagDo) Joins(fields ...field.RelationField) *registeredCourseTagDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registeredCourseTagDo) Preload(fields ...field.RelationField) *registeredCourseTagDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registeredCourseTagDo) FirstOrInit() (*model.RegisteredCourseTag, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourseTag), nil
	}
}

func (r registeredCourseTagDo) FirstOrCreate() (*model.RegisteredCourseTag, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RegisteredCourseTag), nil
	}
}

func (r registeredCourseTagDo) FindByPage(offset int, limit int) (result []*model.RegisteredCourseTag, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registeredCourseTagDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registeredCourseTagDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registeredCourseTagDo) Delete(models ...*model.RegisteredCourseTag) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registeredCourseTagDo) withDO(do gen.Dao) *registeredCourseTagDo {
	r.DO = *do.(*gen.DO)
	return r
}
