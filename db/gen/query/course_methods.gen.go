// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newCourseMethod(db *gorm.DB, opts ...gen.DOOption) courseMethod {
	_courseMethod := courseMethod{}

	_courseMethod.courseMethodDo.UseDB(db, opts...)
	_courseMethod.courseMethodDo.UseModel(&model.CourseMethod{})

	tableName := _courseMethod.courseMethodDo.TableName()
	_courseMethod.ALL = field.NewAsterisk(tableName)
	_courseMethod.ID = field.NewInt32(tableName, "id")
	_courseMethod.Method = field.NewString(tableName, "method")
	_courseMethod.CourseID = field.NewString(tableName, "course_id")

	_courseMethod.fillFieldMap()

	return _courseMethod
}

type courseMethod struct {
	courseMethodDo courseMethodDo

	ALL      field.Asterisk
	ID       field.Int32
	Method   field.String
	CourseID field.String

	fieldMap map[string]field.Expr
}

func (c courseMethod) Table(newTableName string) *courseMethod {
	c.courseMethodDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseMethod) As(alias string) *courseMethod {
	c.courseMethodDo.DO = *(c.courseMethodDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseMethod) updateTableName(table string) *courseMethod {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Method = field.NewString(table, "method")
	c.CourseID = field.NewString(table, "course_id")

	c.fillFieldMap()

	return c
}

func (c *courseMethod) WithContext(ctx context.Context) *courseMethodDo {
	return c.courseMethodDo.WithContext(ctx)
}

func (c courseMethod) TableName() string { return c.courseMethodDo.TableName() }

func (c courseMethod) Alias() string { return c.courseMethodDo.Alias() }

func (c courseMethod) Columns(cols ...field.Expr) gen.Columns {
	return c.courseMethodDo.Columns(cols...)
}

func (c *courseMethod) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseMethod) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["method"] = c.Method
	c.fieldMap["course_id"] = c.CourseID
}

func (c courseMethod) clone(db *gorm.DB) courseMethod {
	c.courseMethodDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseMethod) replaceDB(db *gorm.DB) courseMethod {
	c.courseMethodDo.ReplaceDB(db)
	return c
}

type courseMethodDo struct{ gen.DO }

func (c courseMethodDo) Debug() *courseMethodDo {
	return c.withDO(c.DO.Debug())
}

func (c courseMethodDo) WithContext(ctx context.Context) *courseMethodDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseMethodDo) ReadDB() *courseMethodDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseMethodDo) WriteDB() *courseMethodDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseMethodDo) Session(config *gorm.Session) *courseMethodDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseMethodDo) Clauses(conds ...clause.Expression) *courseMethodDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseMethodDo) Returning(value interface{}, columns ...string) *courseMethodDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseMethodDo) Not(conds ...gen.Condition) *courseMethodDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseMethodDo) Or(conds ...gen.Condition) *courseMethodDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseMethodDo) Select(conds ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseMethodDo) Where(conds ...gen.Condition) *courseMethodDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseMethodDo) Order(conds ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseMethodDo) Distinct(cols ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseMethodDo) Omit(cols ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseMethodDo) Join(table schema.Tabler, on ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseMethodDo) LeftJoin(table schema.Tabler, on ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseMethodDo) RightJoin(table schema.Tabler, on ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseMethodDo) Group(cols ...field.Expr) *courseMethodDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseMethodDo) Having(conds ...gen.Condition) *courseMethodDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseMethodDo) Limit(limit int) *courseMethodDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseMethodDo) Offset(offset int) *courseMethodDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseMethodDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *courseMethodDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseMethodDo) Unscoped() *courseMethodDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseMethodDo) Create(values ...*model.CourseMethod) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseMethodDo) CreateInBatches(values []*model.CourseMethod, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseMethodDo) Save(values ...*model.CourseMethod) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseMethodDo) First() (*model.CourseMethod, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseMethod), nil
	}
}

func (c courseMethodDo) Take() (*model.CourseMethod, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseMethod), nil
	}
}

func (c courseMethodDo) Last() (*model.CourseMethod, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseMethod), nil
	}
}

func (c courseMethodDo) Find() ([]*model.CourseMethod, error) {
	result, err := c.DO.Find()
	return result.([]*model.CourseMethod), err
}

func (c courseMethodDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseMethod, err error) {
	buf := make([]*model.CourseMethod, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseMethodDo) FindInBatches(result *[]*model.CourseMethod, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseMethodDo) Attrs(attrs ...field.AssignExpr) *courseMethodDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseMethodDo) Assign(attrs ...field.AssignExpr) *courseMethodDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseMethodDo) Joins(fields ...field.RelationField) *courseMethodDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseMethodDo) Preload(fields ...field.RelationField) *courseMethodDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseMethodDo) FirstOrInit() (*model.CourseMethod, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseMethod), nil
	}
}

func (c courseMethodDo) FirstOrCreate() (*model.CourseMethod, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseMethod), nil
	}
}

func (c courseMethodDo) FindByPage(offset int, limit int) (result []*model.CourseMethod, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseMethodDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseMethodDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseMethodDo) Delete(models ...*model.CourseMethod) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseMethodDo) withDO(do gen.Dao) *courseMethodDo {
	c.DO = *do.(*gen.DO)
	return c
}
