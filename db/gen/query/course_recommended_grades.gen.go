// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/twin-te/twinte-back/db/gen/model"
)

func newCourseRecommendedGrade(db *gorm.DB, opts ...gen.DOOption) courseRecommendedGrade {
	_courseRecommendedGrade := courseRecommendedGrade{}

	_courseRecommendedGrade.courseRecommendedGradeDo.UseDB(db, opts...)
	_courseRecommendedGrade.courseRecommendedGradeDo.UseModel(&model.CourseRecommendedGrade{})

	tableName := _courseRecommendedGrade.courseRecommendedGradeDo.TableName()
	_courseRecommendedGrade.ALL = field.NewAsterisk(tableName)
	_courseRecommendedGrade.ID = field.NewInt32(tableName, "id")
	_courseRecommendedGrade.Grade = field.NewInt16(tableName, "grade")
	_courseRecommendedGrade.CourseID = field.NewString(tableName, "course_id")

	_courseRecommendedGrade.fillFieldMap()

	return _courseRecommendedGrade
}

type courseRecommendedGrade struct {
	courseRecommendedGradeDo courseRecommendedGradeDo

	ALL      field.Asterisk
	ID       field.Int32
	Grade    field.Int16
	CourseID field.String

	fieldMap map[string]field.Expr
}

func (c courseRecommendedGrade) Table(newTableName string) *courseRecommendedGrade {
	c.courseRecommendedGradeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c courseRecommendedGrade) As(alias string) *courseRecommendedGrade {
	c.courseRecommendedGradeDo.DO = *(c.courseRecommendedGradeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *courseRecommendedGrade) updateTableName(table string) *courseRecommendedGrade {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Grade = field.NewInt16(table, "grade")
	c.CourseID = field.NewString(table, "course_id")

	c.fillFieldMap()

	return c
}

func (c *courseRecommendedGrade) WithContext(ctx context.Context) *courseRecommendedGradeDo {
	return c.courseRecommendedGradeDo.WithContext(ctx)
}

func (c courseRecommendedGrade) TableName() string { return c.courseRecommendedGradeDo.TableName() }

func (c courseRecommendedGrade) Alias() string { return c.courseRecommendedGradeDo.Alias() }

func (c courseRecommendedGrade) Columns(cols ...field.Expr) gen.Columns {
	return c.courseRecommendedGradeDo.Columns(cols...)
}

func (c *courseRecommendedGrade) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *courseRecommendedGrade) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["grade"] = c.Grade
	c.fieldMap["course_id"] = c.CourseID
}

func (c courseRecommendedGrade) clone(db *gorm.DB) courseRecommendedGrade {
	c.courseRecommendedGradeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c courseRecommendedGrade) replaceDB(db *gorm.DB) courseRecommendedGrade {
	c.courseRecommendedGradeDo.ReplaceDB(db)
	return c
}

type courseRecommendedGradeDo struct{ gen.DO }

func (c courseRecommendedGradeDo) Debug() *courseRecommendedGradeDo {
	return c.withDO(c.DO.Debug())
}

func (c courseRecommendedGradeDo) WithContext(ctx context.Context) *courseRecommendedGradeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c courseRecommendedGradeDo) ReadDB() *courseRecommendedGradeDo {
	return c.Clauses(dbresolver.Read)
}

func (c courseRecommendedGradeDo) WriteDB() *courseRecommendedGradeDo {
	return c.Clauses(dbresolver.Write)
}

func (c courseRecommendedGradeDo) Session(config *gorm.Session) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Session(config))
}

func (c courseRecommendedGradeDo) Clauses(conds ...clause.Expression) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c courseRecommendedGradeDo) Returning(value interface{}, columns ...string) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c courseRecommendedGradeDo) Not(conds ...gen.Condition) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c courseRecommendedGradeDo) Or(conds ...gen.Condition) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c courseRecommendedGradeDo) Select(conds ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c courseRecommendedGradeDo) Where(conds ...gen.Condition) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c courseRecommendedGradeDo) Order(conds ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c courseRecommendedGradeDo) Distinct(cols ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c courseRecommendedGradeDo) Omit(cols ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c courseRecommendedGradeDo) Join(table schema.Tabler, on ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c courseRecommendedGradeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c courseRecommendedGradeDo) RightJoin(table schema.Tabler, on ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c courseRecommendedGradeDo) Group(cols ...field.Expr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c courseRecommendedGradeDo) Having(conds ...gen.Condition) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c courseRecommendedGradeDo) Limit(limit int) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c courseRecommendedGradeDo) Offset(offset int) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c courseRecommendedGradeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c courseRecommendedGradeDo) Unscoped() *courseRecommendedGradeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c courseRecommendedGradeDo) Create(values ...*model.CourseRecommendedGrade) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c courseRecommendedGradeDo) CreateInBatches(values []*model.CourseRecommendedGrade, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c courseRecommendedGradeDo) Save(values ...*model.CourseRecommendedGrade) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c courseRecommendedGradeDo) First() (*model.CourseRecommendedGrade, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseRecommendedGrade), nil
	}
}

func (c courseRecommendedGradeDo) Take() (*model.CourseRecommendedGrade, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseRecommendedGrade), nil
	}
}

func (c courseRecommendedGradeDo) Last() (*model.CourseRecommendedGrade, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseRecommendedGrade), nil
	}
}

func (c courseRecommendedGradeDo) Find() ([]*model.CourseRecommendedGrade, error) {
	result, err := c.DO.Find()
	return result.([]*model.CourseRecommendedGrade), err
}

func (c courseRecommendedGradeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CourseRecommendedGrade, err error) {
	buf := make([]*model.CourseRecommendedGrade, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c courseRecommendedGradeDo) FindInBatches(result *[]*model.CourseRecommendedGrade, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c courseRecommendedGradeDo) Attrs(attrs ...field.AssignExpr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c courseRecommendedGradeDo) Assign(attrs ...field.AssignExpr) *courseRecommendedGradeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c courseRecommendedGradeDo) Joins(fields ...field.RelationField) *courseRecommendedGradeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c courseRecommendedGradeDo) Preload(fields ...field.RelationField) *courseRecommendedGradeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c courseRecommendedGradeDo) FirstOrInit() (*model.CourseRecommendedGrade, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseRecommendedGrade), nil
	}
}

func (c courseRecommendedGradeDo) FirstOrCreate() (*model.CourseRecommendedGrade, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CourseRecommendedGrade), nil
	}
}

func (c courseRecommendedGradeDo) FindByPage(offset int, limit int) (result []*model.CourseRecommendedGrade, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c courseRecommendedGradeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c courseRecommendedGradeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c courseRecommendedGradeDo) Delete(models ...*model.CourseRecommendedGrade) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *courseRecommendedGradeDo) withDO(do gen.Dao) *courseRecommendedGradeDo {
	c.DO = *do.(*gen.DO)
	return c
}
